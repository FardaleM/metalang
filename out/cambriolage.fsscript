open System

let eof = ref false
let buffer = ref ""
let readChar_ () =
  if (!buffer) = "" then
    let tmp = Console.ReadLine()
    eof := tmp = null
    buffer := tmp + "\n"
  (!buffer).[0]

let consommeChar () =
  ignore (readChar_ ())
  buffer := (!buffer).[1..]

let stdin_sep () =
  let cond () =
    if !eof then
      false
    else
      let c = readChar_()
      c = ' ' || c = '\n' || c = '\t' || c = '\r'
  while cond () do
    consommeChar ()

let readInt () =
  let sign =
    if readChar_ () = '-' then
      consommeChar ()
      -1
    else 1
  let rec loop i =
    let c = readChar_ ()
    if c <= '9' && c >= '0' then
      consommeChar ()
      loop (i * 10 + (int c) - (int '0'))
    else
      i * sign
  loop 0

let max2_ a b =
  if a > b then
    a
  else
    b

exception Found_1 of int

let nbPassePartout n (passepartout:int array array) m (serrures:int array array) =
  try
  let max_ancient = ref( 0 )
  let max_recent = ref( 0 )
  for i = 0 to m - 1 do
    if serrures.[i].[0] = (- 1) && serrures.[i].[1] > (!max_ancient) then
      max_ancient := serrures.[i].[1]
    if serrures.[i].[0] = 1 && serrures.[i].[1] > (!max_recent) then
      max_recent := serrures.[i].[1]
  let max_ancient_pp = ref( 0 )
  let max_recent_pp = ref( 0 )
  for i = 0 to n - 1 do
    let pp = passepartout.[i]
    if pp.[0] >= (!max_ancient) && pp.[1] >= (!max_recent) then
      raise (Found_1(1))
    max_ancient_pp := max2_ (!max_ancient_pp) pp.[0]
    max_recent_pp := max2_ (!max_recent_pp) pp.[1]
  if (!max_ancient_pp) >= (!max_ancient) && (!max_recent_pp) >= (!max_recent) then
    2
  else
    0
  with Found_1 (out) -> out

let () =
  let n = readInt()
  stdin_sep()
  let passepartout = Array.init n (fun i ->
    let out0 = Array.init 2 (fun j ->
      let out01 = readInt()
      stdin_sep()
      out01)
    out0)
  let m = readInt()
  stdin_sep()
  let serrures = Array.init m (fun k ->
    let out1 = Array.init 2 (fun l ->
      let out_ = readInt()
      stdin_sep()
      out_)
    out1)
  Printf.printf "%d" (nbPassePartout n passepartout m serrures)
 