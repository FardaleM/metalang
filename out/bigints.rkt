#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))
(define last-char 0)
(define next-char (lambda () (set! last-char (read-char (current-input-port)))))
(next-char)
(define mread-char (lambda ()
  (let ([ out last-char])
    (block
      (next-char)
      out
    ))))
(define mread-blank (lambda ()
  (if (or (eq? last-char #\NewLine) (eq? last-char #\Space) ) (block (next-char) (mread-blank)) '())
))

(define (max2 a b)
  ;toto
  (max a b)
)
(define (min2 a b)
  ;toto
  (min a b)
)
(struct bigint ([bigint_chiffres #:mutable] [bigint_len #:mutable] [bigint_sign #:mutable]))
(define (read_bigint len)
  ;toto
  (let ([chiffres (array_init_withenv len (lambda (j) 
                                            (lambda (_) ((lambda (c) 
                                                           (let ([dn (char->integer c)])
                                                           (list '() dn))) (mread-char)))) '())])
(let ([dq 0])
(let ([dr (quotient (- len 1) 2)])
(letrec ([dp (lambda (i) 
               (if (<= i dr)
               (let ([tmp (vector-ref chiffres i)])
               (block
                 (vector-set! chiffres i (vector-ref chiffres (- (- len 1) i)))
                 (vector-set! chiffres (- (- len 1) i) tmp)
                 (dp (+ i 1))
                 ))
               (bigint chiffres len #t)))])
(dp dq)))))
)
(define (print_bigint a)
  ;toto
  (block
    (if (not (bigint-bigint_sign a))
    (display (integer->char 45))
    '())
    (let ([dl 0])
    (let ([dm (- (bigint-bigint_len a) 1)])
    (letrec ([dk (lambda (i) 
                   (if (<= i dm)
                   (block
                     (display (vector-ref (bigint-bigint_chiffres a) (- (- (bigint-bigint_len a) 1) i)))
                     (dk (+ i 1))
                     )
                   '()))])
    (dk dl))))
  )
)
(define (bigint_eq a b)
  ;toto
  ; Renvoie vrai si a = b 
  (let ([df (lambda (_) 
              '())])
  (if (not (eq? (bigint-bigint_sign a) (bigint-bigint_sign b)))
  #f
  (let ([dg (lambda (_) 
              (df 'nil))])
  (if (not (eq? (bigint-bigint_len a) (bigint-bigint_len b)))
  #f
  (let ([di 0])
  (let ([dj (- (bigint-bigint_len a) 1)])
  (letrec ([dh (lambda (i) 
                 (if (<= i dj)
                 (if (not (eq? (vector-ref (bigint-bigint_chiffres a) i) (vector-ref (bigint-bigint_chiffres b) i)))
                 #f
                 (dh (+ i 1)))
                 #t))])
  (dh di))))))))
)
(define (bigint_gt a b)
  ;toto
  ; Renvoie vrai si a > b 
  (let ([cx (lambda (_) 
              '())])
  (if (and (bigint-bigint_sign a) (not (bigint-bigint_sign b)))
  #t
  (let ([cy (lambda (_) 
              (cx 'nil))])
  (if (and (not (bigint-bigint_sign a)) (bigint-bigint_sign b))
  #f
  (let ([cz (lambda (_) 
              #t)])
  (if (> (bigint-bigint_len a) (bigint-bigint_len b))
  (bigint-bigint_sign a)
  (let ([da (lambda (_) 
              (cz 'nil))])
  (if (< (bigint-bigint_len a) (bigint-bigint_len b))
  (not (bigint-bigint_sign a))
  (let ([dd 0])
  (let ([de (- (bigint-bigint_len a) 1)])
  (letrec ([db (lambda (i) 
                 (if (<= i de)
                 (let ([j (- (- (bigint-bigint_len a) 1) i)])
                 (let ([dc (lambda (_) 
                             (db (+ i 1)))])
                 (if (> (vector-ref (bigint-bigint_chiffres a) j) (vector-ref (bigint-bigint_chiffres b) j))
                 (bigint-bigint_sign a)
                 (if (< (vector-ref (bigint-bigint_chiffres a) j) (vector-ref (bigint-bigint_chiffres b) j))
                 (not (bigint-bigint_sign a))
                 (dc 'nil)))))
                 (da 'nil)))])
  (db dd))))))))))))
)
(define (bigint_lt a b)
  ;toto
  (not (bigint_gt a b))
)
(define (add_bigint_positif a b)
  ;toto
  ; Une addition ou on en a rien a faire des signes 
  (let ([len (+ (max2 (bigint-bigint_len a) (bigint-bigint_len b)) 1)])
  (let ([retenue 0])
  (let ([chiffres (array_init_withenv len (lambda (i) 
                                            (lambda (retenue) 
                                              (let ([tmp retenue])
                                              (let ([tmp (if (< i (bigint-bigint_len a))
                                                         (let ([tmp (+ tmp (vector-ref (bigint-bigint_chiffres a) i))])
                                                         tmp)
                                                         tmp)])
                                              (let ([tmp (if (< i (bigint-bigint_len b))
                                                         (let ([tmp (+ tmp (vector-ref (bigint-bigint_chiffres b) i))])
                                                         tmp)
                                                         tmp)])
                                              (let ([retenue (quotient tmp 10)])
                                              (let ([cu (remainder tmp 10)])
                                              (list retenue cu)))))))) retenue)])
  (letrec ([cw (lambda (len) 
                 (if (and (> len 0) (eq? (vector-ref chiffres (- len 1)) 0))
                 (let ([len (- len 1)])
                 (cw len))
                 (bigint chiffres len #t)))])
  (cw len)))))
)
(define (sub_bigint_positif a b)
  ;toto
  ; Une soustraction ou on en a rien a faire des signes
  ;Pré-requis : a > b
  ;
  (let ([len (bigint-bigint_len a)])
  (let ([retenue 0])
  (let ([chiffres (array_init_withenv len (lambda (i) 
                                            (lambda (retenue) 
                                              (let ([tmp (+ retenue (vector-ref (bigint-bigint_chiffres a) i))])
                                              (let ([tmp (if (< i (bigint-bigint_len b))
                                                         (let ([tmp (- tmp (vector-ref (bigint-bigint_chiffres b) i))])
                                                         tmp)
                                                         tmp)])
                                              ((lambda (internal_env) (apply (lambda
                                               (retenue tmp) 
                                              (let ([cr tmp])
                                              (list retenue cr))) internal_env)) 
                                              (if (< tmp 0)
                                              (let ([tmp (+ tmp 10)])
                                              (let ([retenue (- 1)])
                                              (list retenue tmp)))
                                              (let ([retenue 0])
                                              (list retenue tmp)))))))) retenue)])
  (letrec ([ct (lambda (len) 
                 (if (and (> len 0) (eq? (vector-ref chiffres (- len 1)) 0))
                 (let ([len (- len 1)])
                 (ct len))
                 (bigint chiffres len #t)))])
  (ct len)))))
)
(define (neg_bigint a)
  ;toto
  (bigint (bigint-bigint_chiffres a) (bigint-bigint_len a) (not (bigint-bigint_sign a)))
)
(define (add_bigint a b)
  ;toto
  (let ([cm (lambda (_) 
              '())])
  (if (eq? (bigint-bigint_sign a) (bigint-bigint_sign b))
  (let ([cn (lambda (_) 
              (cm 'nil))])
  (if (bigint-bigint_sign a)
  (add_bigint_positif a b)
  (neg_bigint (add_bigint_positif a b))))
  (let ([co (lambda (_) 
              (cm 'nil))])
  (if (bigint-bigint_sign a)
  ; a positif, b negatif 
  (let ([cp (lambda (_) 
              (co 'nil))])
  (if (bigint_gt a (neg_bigint b))
  (sub_bigint_positif a b)
  (neg_bigint (sub_bigint_positif b a))))
  ; a negatif, b positif 
  (let ([cq (lambda (_) 
              (co 'nil))])
  (if (bigint_gt (neg_bigint a) b)
  (neg_bigint (sub_bigint_positif a b))
  (sub_bigint_positif b a)))))))
)
(define (sub_bigint a b)
  ;toto
  (add_bigint a (neg_bigint b))
)
(define (mul_bigint_cp a b)
  ;toto
  ; Cet algorithm est quadratique.
  ;C'est le même que celui qu'on enseigne aux enfants en CP.
  ;D'ou le nom de la fonction. 
  (let ([len (+ (+ (bigint-bigint_len a) (bigint-bigint_len b)) 1)])
  (let ([chiffres (array_init_withenv len (lambda (k) 
                                            (lambda (_) (let ([cc 0])
                                                        (list '() cc)))) '())])
  (let ([ck 0])
  (let ([cl (- (bigint-bigint_len a) 1)])
  (letrec ([cg (lambda (i) 
                 (if (<= i cl)
                 (let ([retenue 0])
                 (let ([ci 0])
                 (let ([cj (- (bigint-bigint_len b) 1)])
                 (letrec ([ch (lambda (j retenue) 
                                (if (<= j cj)
                                (block
                                  (vector-set! chiffres (+ i j) (+ (vector-ref chiffres (+ i j)) (+ retenue (* (vector-ref (bigint-bigint_chiffres b) j) (vector-ref (bigint-bigint_chiffres a) i)))))
                                  (let ([retenue (quotient (vector-ref chiffres (+ i j)) 10)])
                                  (block
                                    (vector-set! chiffres (+ i j) (remainder (vector-ref chiffres (+ i j)) 10))
                                    (ch (+ j 1) retenue)
                                    ))
                                  )
                                (block
                                  (vector-set! chiffres (+ i (bigint-bigint_len b)) (+ (vector-ref chiffres (+ i (bigint-bigint_len b))) retenue))
                                  (cg (+ i 1))
                                  )))])
                 (ch ci retenue)))))
                 (block
                   (vector-set! chiffres (+ (bigint-bigint_len a) (bigint-bigint_len b)) (quotient (vector-ref chiffres (- (+ (bigint-bigint_len a) (bigint-bigint_len b)) 1)) 10))
                   (vector-set! chiffres (- (+ (bigint-bigint_len a) (bigint-bigint_len b)) 1) (remainder (vector-ref chiffres (- (+ (bigint-bigint_len a) (bigint-bigint_len b)) 1)) 10))
                   (let ([ce 0])
                   (let ([cf 2])
                   (letrec ([cd (lambda (l len) 
                                  (if (<= l cf)
                                  (let ([len (if (and (not (eq? len 0)) (eq? (vector-ref chiffres (- len 1)) 0))
                                             (let ([len (- len 1)])
                                             len)
                                             len)])
                                  (cd (+ l 1) len))
                                  (bigint chiffres len (eq? (bigint-bigint_sign a) (bigint-bigint_sign b)))))])
                   (cd ce len))))
                 )))])
  (cg ck))))))
)
(define (bigint_premiers_chiffres a i)
  ;toto
  (let ([len (min2 i (bigint-bigint_len a))])
  (letrec ([cb (lambda (len) 
                 (if (and (not (eq? len 0)) (eq? (vector-ref (bigint-bigint_chiffres a) (- len 1)) 0))
                 (let ([len (- len 1)])
                 (cb len))
                 (bigint (bigint-bigint_chiffres a) len (bigint-bigint_sign a))))])
  (cb len)))
)
(define (bigint_shift a i)
  ;toto
  (let ([e (+ (bigint-bigint_len a) i)])
  (let ([chiffres (array_init_withenv e (lambda (k) 
                                          (lambda (_) (let ([bz (lambda (_) 
                                                                  (lambda (by) 
                                                                    (list '() by)))])
  (if (>= k i)
  (let ([by (vector-ref (bigint-bigint_chiffres a) (- k i))])
  (list '() by))
  (let ([by 0])
  (list '() by)))))) '())])
(bigint chiffres (+ (bigint-bigint_len a) i) (bigint-bigint_sign a))))
)
(define (mul_bigint aa bb)
  ;toto
  (let ([bw (lambda (_) 
              ; Algorithme de Karatsuba 
              (let ([split (quotient (min2 (bigint-bigint_len aa) (bigint-bigint_len bb)) 2)])
              (let ([a (bigint_shift aa (- split))])
              (let ([b (bigint_premiers_chiffres aa split)])
              (let ([c (bigint_shift bb (- split))])
              (let ([d (bigint_premiers_chiffres bb split)])
              (let ([amoinsb (sub_bigint a b)])
              (let ([cmoinsd (sub_bigint c d)])
              (let ([ac (mul_bigint a c)])
              (let ([bd (mul_bigint b d)])
              (let ([amoinsbcmoinsd (mul_bigint amoinsb cmoinsd)])
              (let ([acdec (bigint_shift ac (* 2 split))])
              (add_bigint (add_bigint acdec bd) (bigint_shift (sub_bigint (add_bigint ac bd) amoinsbcmoinsd) split))))))))))))))])
  (if (eq? (bigint-bigint_len aa) 0)
  aa
  (let ([bx (lambda (_) 
              (bw 'nil))])
  (if (eq? (bigint-bigint_len bb) 0)
  bb
  (if (or (< (bigint-bigint_len aa) 3) (< (bigint-bigint_len bb) 3))
  (mul_bigint_cp aa bb)
  (bx 'nil))))))
)
(define (log10 a)
  ;toto
  (let ([out_ 1])
  (letrec ([bv (lambda (a out_) 
                 (if (>= a 10)
                 (let ([a (quotient a 10)])
                 (let ([out_ (+ out_ 1)])
                 (bv a out_)))
                 out_))])
  (bv a out_)))
)
(define (bigint_of_int i)
  ;toto
  (let ([size (log10 i)])
  (let ([size (if (eq? i 0)
              (let ([size 0])
              size)
              size)])
  (let ([t_ (array_init_withenv size (lambda (j) 
                                       (lambda (_) (let ([bq 0])
                                                   (list '() bq)))) '())])
  (let ([bs 0])
  (let ([bt (- size 1)])
  (letrec ([br (lambda (k i) 
                 (if (<= k bt)
                 (block
                   (vector-set! t_ k (remainder i 10))
                   (let ([i (quotient i 10)])
                   (br (+ k 1) i))
                   )
                 (bigint t_ size #t)))])
  (br bs i)))))))
)
(define (fact_bigint a)
  ;toto
  (let ([one (bigint_of_int 1)])
  (let ([out_ one])
  (letrec ([bp (lambda (a out_) 
                 (if (not (bigint_eq a one))
                 (let ([out_ (mul_bigint a out_)])
                 (let ([a (sub_bigint a one)])
                 (bp a out_)))
                 out_))])
  (bp a out_))))
)
(define (sum_chiffres_bigint a)
  ;toto
  (let ([out_ 0])
  (let ([bm 0])
  (let ([bn (- (bigint-bigint_len a) 1)])
  (letrec ([bl (lambda (i out_) 
                 (if (<= i bn)
                 (let ([out_ (+ out_ (vector-ref (bigint-bigint_chiffres a) i))])
                 (bl (+ i 1) out_))
                 out_))])
  (bl bm out_)))))
)
(define (euler20 _)
  ;toto
  (let ([a (bigint_of_int 15)])
  ; normalement c'est 100 
  (let ([a (fact_bigint a)])
  (sum_chiffres_bigint a)))
)
(define (bigint_exp a b)
  ;toto
  (let ([bj (lambda (_) 
              '())])
  (if (eq? b 1)
  a
  (let ([bk (lambda (_) 
              (bj 'nil))])
  (if (eq? (remainder b 2) 0)
  (bigint_exp (mul_bigint a a) (quotient b 2))
  (mul_bigint a (bigint_exp a (- b 1)))))))
)
(define (bigint_exp_10chiffres a b)
  ;toto
  (let ([a (bigint_premiers_chiffres a 10)])
  (let ([bh (lambda (_) 
              '())])
  (if (eq? b 1)
  a
  (let ([bi (lambda (_) 
              (bh 'nil))])
  (if (eq? (remainder b 2) 0)
  (bigint_exp_10chiffres (mul_bigint a a) (quotient b 2))
  (mul_bigint a (bigint_exp_10chiffres a (- b 1))))))))
)
(define (euler48 _)
  ;toto
  (let ([sum (bigint_of_int 0)])
  (let ([bf 1])
  (let ([bg 100])
  (letrec ([be (lambda (i sum) 
                 (if (<= i bg)
                 ; 1000 normalement 
                 (let ([ib (bigint_of_int i)])
                 (let ([ibeib (bigint_exp_10chiffres ib i)])
                 (let ([sum (add_bigint sum ibeib)])
                 (let ([sum (bigint_premiers_chiffres sum 10)])
                 (be (+ i 1) sum)))))
                 (block
                   (display "euler 48 = ")
                   (print_bigint sum)
                   (display "\n")
                   )))])
  (be bf sum)))))
)
(define (euler16 _)
  ;toto
  (let ([a (bigint_of_int 2)])
  (let ([a (bigint_exp a 100)])
  ; 1000 normalement 
  (sum_chiffres_bigint a)))
)
(define (euler25 _)
  ;toto
  (let ([i 2])
  (let ([a (bigint_of_int 1)])
  (let ([b (bigint_of_int 1)])
  (letrec ([bc (lambda (a b i) 
                 (if (< (bigint-bigint_len b) 100)
                 ; 1000 normalement 
                 (let ([c (add_bigint a b)])
                 (let ([a b])
                 (let ([b c])
                 (let ([i (+ i 1)])
                 (bc a b i)))))
                 i))])
  (bc a b i)))))
)
(define (euler29 _)
  ;toto
  (let ([maxA 5])
  (let ([maxB 5])
  (let ([f (+ maxA 1)])
  (let ([a_bigint (array_init_withenv f (lambda (j) 
                                          (lambda (_) (let ([o (bigint_of_int (* j j))])
                                                      (list '() o)))) '())])
  (let ([g (+ maxA 1)])
  (let ([a0_bigint (array_init_withenv g (lambda (j2) 
                                           (lambda (_) (let ([p (bigint_of_int j2)])
                                                       (list '() p)))) '())])
  (let ([h (+ maxA 1)])
  (let ([b (array_init_withenv h (lambda (k) 
                                   (lambda (_) (let ([q 2])
                                               (list '() q)))) '())])
  (let ([n 0])
  (let ([found #t])
  (letrec ([s (lambda (found n) 
                (if found
                (let ([min_ (vector-ref a0_bigint 0)])
                (let ([found #f])
                (let ([y 2])
                (let ([z maxA])
                (letrec ([x (lambda (i found min_) 
                              (if (<= i z)
                              ((lambda (internal_env) (apply (lambda (found min_) 
                                                                    (x (+ i 1) found min_)) internal_env)) 
                              (if (<= (vector-ref b i) maxB)
                              ((lambda (internal_env) (apply (lambda (found min_) 
                                                                    (list found min_)) internal_env)) 
                              (if found
                              (let ([min_ (if (bigint_lt (vector-ref a_bigint i) min_)
                                          (let ([min_ (vector-ref a_bigint i)])
                                          min_)
                                          min_)])
                              (list found min_))
                              (let ([min_ (vector-ref a_bigint i)])
                              (let ([found #t])
                              (list found min_)))))
                              (list found min_)))
                              (let ([n (if found
                                       (let ([n (+ n 1)])
                                       (let ([v 2])
                                       (let ([w maxA])
                                       (letrec ([u (lambda (l) 
                                                     (if (<= l w)
                                                     (block
                                                       (if (and (bigint_eq (vector-ref a_bigint l) min_) (<= (vector-ref b l) maxB))
                                                       (block
                                                         (vector-set! b l (+ (vector-ref b l) 1))
                                                         (vector-set! a_bigint l (mul_bigint (vector-ref a_bigint l) (vector-ref a0_bigint l)))
                                                         )
                                                       '())
                                                       (u (+ l 1))
                                                       )
                                                     n))])
                                       (u v)))))
                              n)])
                              (s found n))))])
                (x y found min_))))))
    n))])
  (s found n))))))))))))
)
(define main
  (block
    (map display (list (euler29 'nil) "\n"))
    (let ([sum (read_bigint 50)])
    (let ([dt 2])
    (let ([du 100])
    (letrec ([ds (lambda (i sum) 
                   (if (<= i du)
                   (block
                     (mread-blank)
                     (let ([tmp (read_bigint 50)])
                     (let ([sum (add_bigint sum tmp)])
                     (ds (+ i 1) sum)))
                     )
                   (block
                     (display "euler13 = ")
                     (print_bigint sum)
                     (map display (list "\n" "euler25 = " (euler25 'nil) "\n" "euler16 = " (euler16 'nil) "\n"))
                     (euler48 'nil)
                     (map display (list "euler20 = " (euler20 'nil) "\n"))
                     (let ([a (bigint_of_int 999999)])
                     (let ([b (bigint_of_int 9951263)])
                     (block
                       (print_bigint a)
                       (display ">>1=")
                       (print_bigint (bigint_shift a (- 1)))
                       (display "\n")
                       (print_bigint a)
                       (display "*")
                       (print_bigint b)
                       (display "=")
                       (print_bigint (mul_bigint a b))
                       (display "\n")
                       (print_bigint a)
                       (display "*")
                       (print_bigint b)
                       (display "=")
                       (print_bigint (mul_bigint_cp a b))
                       (display "\n")
                       (print_bigint a)
                       (display "+")
                       (print_bigint b)
                       (display "=")
                       (print_bigint (add_bigint a b))
                       (display "\n")
                       (print_bigint b)
                       (display "-")
                       (print_bigint a)
                       (display "=")
                       (print_bigint (sub_bigint b a))
                       (display "\n")
                       (print_bigint a)
                       (display "-")
                       (print_bigint b)
                       (display "=")
                       (print_bigint (sub_bigint a b))
                       (display "\n")
                       (print_bigint a)
                       (display ">")
                       (print_bigint b)
                       (display "=")
                       (let ([m (bigint_gt a b)])
                       (block
                         (if m
                         (display "True")
                         (display "False"))
                         (display "\n")
                         ))
                       )))
                     )))])
    (ds dt sum)))))
  )
)

