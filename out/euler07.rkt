#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))

(define divisible (lambda (n t_ size) 
                    (let ([d 0])
                      (let ([e (- size 1)])
                        (letrec ([c (lambda (i) 
                                      (if (<= i e)
                                        (if (eq? (remainder n (vector-ref t_ i)) 0)
                                          #t
                                          (c (+ i 1)))
                                        #f))])
                        (c d))))))
(define find_ (lambda (n t_ used nth_) 
                (letrec ([b (lambda (n used) 
                              (if (not (eq? used nth_))
                                ((lambda (internal_env) (apply (lambda
                                 (n used) 
                                (b n used)) internal_env)) (if (divisible n t_ used)
                                                             (let ([n (+ n 1)])
                                                               (list n used))
                                                             (block
                                                               (vector-set! t_ used n)
                                                               (let ([n (+ n 1)])
                                                                 (let ([used (+ used 1)])
                                                                   (list n used)))
                                                               )))
                                (vector-ref t_ (- used 1))))])
                (b n used))))
(define main (let ([n 10001])
               (let ([t_ (array_init_withenv n (lambda (i) 
                                                 (lambda (_) (let ([f 2])
                                                               (list '() f)))) '())])
               (block
                 (display (find_ 3 t_ 1 n))
                 (display "\n")
                 ))))

