#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (let ((tab (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    ))))) (list env tab))))

(define (eratostene t0 max0)
  ;toto
  (let ([n 0])
  (let ([s (- max0 1)])
  (letrec ([q (lambda (i n) 
                (if (<= i s)
                (if (eq? (vector-ref t0 i) i)
                (let ([n (+ n 1)])
                (let ([j (* i i)])
                (letrec ([r (lambda (j) 
                              (if (and (< j max0) (> j 0))
                              (block
                                (vector-set! t0 j 0)
                                (let ([j (+ j i)])
                                (r j))
                                )
                              (q (+ i 1) n)))])
                (r j))))
                (q (+ i 1) n))
                n))])
  (q 2 n))))
)
(define (fillPrimesFactors t0 n primes nprimes)
  ;toto
  (let ([m (- nprimes 1)])
  (letrec ([g (lambda (i n) 
                (if (<= i m)
                (let ([d (vector-ref primes i)])
                (letrec ([h (lambda (n) 
                              (if (eq? (remainder n d) 0)
                              (block
                                (vector-set! t0 d (+ (vector-ref t0 d) 1))
                                (let ([n (quotient n d)])
                                (h n))
                                )
                              (if (eq? n 1)
                              (vector-ref primes i)
                              (g (+ i 1) n))))])
                (h n)))
                n))])
  (g 0 n)))
)
(define (sumdivaux2 t0 n i)
  ;toto
  (letrec ([f (lambda (i) 
                (if (and (< i n) (eq? (vector-ref t0 i) 0))
                (let ([i (+ i 1)])
                (f i))
                i))])
  (f i))
)
(define (sumdivaux t0 n i)
  ;toto
  (if (> i n)
  1
  (if (eq? (vector-ref t0 i) 0)
  (sumdivaux t0 n (sumdivaux2 t0 n (+ i 1)))
  (let ([o (sumdivaux t0 n (sumdivaux2 t0 n (+ i 1)))])
  (let ([out0 0])
  (let ([p i])
  (let ([e (vector-ref t0 i)])
  (letrec ([c (lambda (j out0 p) 
                (if (<= j e)
                (let ([out0 (+ out0 p)])
                (let ([p (* p i)])
                (c (+ j 1) out0 p)))
                (* (+ out0 1) o)))])
  (c 1 out0 p))))))))
)
(define (sumdiv nprimes primes n)
  ;toto
  ((lambda (internal_env) (apply (lambda (b t0) 
                                        (let ([max0 (fillPrimesFactors t0 n primes nprimes)])
                                        (sumdivaux t0 max0 0))) internal_env)) (array_init_withenv (+ n 1) 
  (lambda (i) 
    (lambda (b) 
      (let ([a 0])
      (list '() a)))) '()))
)
(define main
  (let ([maximumprimes 1001])
  ((lambda (internal_env) (apply (lambda (v era) 
                                        (let ([nprimes (eratostene era maximumprimes)])
                                        ((lambda (internal_env) (apply (lambda (x primes) 
                                                                              (let ([l 0])
                                                                              (let ([ba (- maximumprimes 1)])
                                                                              (letrec ([z 
                                                                                (lambda (k l) 
                                                                                (if (<= k ba)
                                                                                (if (eq? (vector-ref era k) k)
                                                                                (block
                                                                                (vector-set! primes l k)
                                                                                (let ([l (+ l 1)])
                                                                                (z (+ k 1) l))
                                                                                )
                                                                                (z (+ k 1) l))
                                                                                (block
                                                                                (map display (list l " == " nprimes "\n"))
                                                                                (let ([sum 0])
                                                                                (letrec ([y 
                                                                                (lambda (n sum) 
                                                                                (if (<= n 1000)
                                                                                (let ([other (- (sumdiv nprimes primes n) n)])
                                                                                (if (> other n)
                                                                                (let ([othersum (- (sumdiv nprimes primes other) other)])
                                                                                (if (eq? othersum n)
                                                                                (block
                                                                                (map display (list other " & " n "\n"))
                                                                                (let ([sum (+ sum (+ other n))])
                                                                                (y (+ n 1) sum))
                                                                                )
                                                                                (y (+ n 1) sum)))
                                                                                (y (+ n 1) sum)))
                                                                                (block
                                                                                (map display (list "\n" sum "\n"))
                                                                                )))])
                                                                                (y 2 sum)))
                                                                                )))])
                                                                              (z 2 l))))) internal_env)) (array_init_withenv nprimes 
  (lambda (o) 
    (lambda (x) 
      (let ([w 0])
      (list '() w)))) '())))) internal_env)) (array_init_withenv maximumprimes (lambda (j) 
                                                                                (lambda (v) 
                                                                                (let ([u j])
                                                                                (list '() u)))) '())))
)

