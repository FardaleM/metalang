#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))

(define (eratostene t0 max0)
  ;toto
  (let ([n 0])
  (let ([x 2])
  (let ([y (- max0 1)])
  (letrec ([v (lambda (i n) 
                (if (<= i y)
                (let ([n (if (eq? (vector-ref t0 i) i)
                         (let ([n (+ n 1)])
                         (let ([j (* i i)])
                         (letrec ([w (lambda (j) 
                                       (if (and (< j max0) (> j 0))
                                       (block
                                         (vector-set! t0 j 0)
                                         (let ([j (+ j i)])
                                         (w j))
                                         )
                                       n))])
                         (w j))))
                n)])
                (v (+ i 1) n))
                n))])
  (v x n)))))
)
(define (fillPrimesFactors t0 n primes nprimes)
  ;toto
  (let ([s 0])
  (let ([u (- nprimes 1)])
  (letrec ([q (lambda (i n) 
                (if (<= i u)
                (let ([d (vector-ref primes i)])
                (letrec ([r (lambda (n) 
                              (if (eq? (remainder n d) 0)
                              (block
                                (vector-set! t0 d (+ (vector-ref t0 d) 1))
                                (let ([n (quotient n d)])
                                (r n))
                                )
                              (if (eq? n 1)
                              (vector-ref primes i)
                              (q (+ i 1) n))))])
                (r n)))
                n))])
  (q s n))))
)
(define (sumdivaux2 t0 n i)
  ;toto
  (letrec ([m (lambda (i) 
                (if (and (< i n) (eq? (vector-ref t0 i) 0))
                (let ([i (+ i 1)])
                (m i))
                i))])
  (m i))
)
(define (sumdivaux t0 n i)
  ;toto
  (let ([c (lambda (_) 
             '())])
  (if (> i n)
  1
  (let ([e (lambda (_) 
             (c 'nil))])
  (if (eq? (vector-ref t0 i) 0)
  (sumdivaux t0 n (sumdivaux2 t0 n (+ i 1)))
  (let ([o (sumdivaux t0 n (sumdivaux2 t0 n (+ i 1)))])
  (let ([out0 0])
  (let ([p i])
  (let ([g 1])
  (let ([h (vector-ref t0 i)])
  (letrec ([f (lambda (j out0 p) 
                (if (<= j h)
                (let ([out0 (+ out0 p)])
                (let ([p (* p i)])
                (f (+ j 1) out0 p)))
                (* (+ out0 1) o)))])
  (f g out0 p)))))))))))
)
(define (sumdiv nprimes primes n)
  ;toto
  (let ([t0 (array_init_withenv (+ n 1) (lambda (i) 
                                          (lambda (_) (let ([b 0])
                                                      (list '() b)))) '())])
  (let ([max0 (fillPrimesFactors t0 n primes nprimes)])
  (sumdivaux t0 max0 0)))
)
(define main
  (let ([maximumprimes 1001])
  (let ([era (array_init_withenv maximumprimes (lambda (j) 
                                                 (lambda (_) (let ([z j])
                                                             (list '() z)))) '())])
  (let ([nprimes (eratostene era maximumprimes)])
  (let ([primes (array_init_withenv nprimes (lambda (o) 
                                              (lambda (_) (let ([ba 0])
                                                          (list '() ba)))) '())])
  (let ([l 0])
  (let ([bf 2])
  (let ([bg (- maximumprimes 1)])
  (letrec ([be (lambda (k l) 
                 (if (<= k bg)
                 (let ([l (if (eq? (vector-ref era k) k)
                          (block
                            (vector-set! primes l k)
                            (let ([l (+ l 1)])
                            l)
                            )
                          l)])
                 (be (+ k 1) l))
                 (block
                   (map display (list l " == " nprimes "\n"))
                   (let ([sum 0])
                   (let ([bc 2])
                   (let ([bd 1000])
                   (letrec ([bb (lambda (n sum) 
                                  (if (<= n bd)
                                  (let ([other (- (sumdiv nprimes primes n) n)])
                                  (let ([sum (if (> other n)
                                             (let ([othersum (- (sumdiv nprimes primes other) other)])
                                             (let ([sum (if (eq? othersum n)
                                                        (block
                                                          (map display (list other " & " n "\n"))
                                                          (let ([sum (+ sum (+ other n))])
                                                          sum)
                                                          )
                                                        sum)])
                                             sum))
                                             sum)])
                                  (bb (+ n 1) sum)))
                                  (block
                                    (map display (list "\n" sum "\n"))
                                    )))])
                   (bb bc sum)))))
                 )))])
  (be bf l)))))))))
)

