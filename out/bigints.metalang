def int max2_ (int a, int b)
  if a > b
  then
    return a
  else
    return b
  end
end

def int max2 (int a, int b)
  return max2_(a, b)
end

def int min2_ (int a, int b)
  if a < b
  then
    return a
  else
    return b
  end
end

def int min2 (int a, int b)
  return min2_(a, b)
end

record bigint bool bigint_sign;
int bigint_len;
array<int> bigint_chiffres;

end

def @bigint read_bigint (int len)
  def array<int> chiffres[len] with j do
                                        def read char c
                                        return int_of_char(c)
  end
  for i = 0 to  (len - 1) / 2
  do
    def int tmp = chiffres[i]
    chiffres[i] = chiffres[len - 1 - i]
    chiffres[len - 1 - i] = tmp
  end
  return {"bigint_sign":true, "bigint_len":len, "bigint_chiffres":chiffres}
end

def void print_bigint (@bigint a)
  if !a.bigint_sign
  then
    print char '-'
  end
  for i = 0 to  a.bigint_len - 1
  do
    print int a.bigint_chiffres[a.bigint_len - 1 - i]
  end
end

def bool bigint_eq (@bigint a, @bigint b)
  //  Renvoie vrai si a = b 
  if a.bigint_sign != b.bigint_sign
  then
    return false
  else
    if a.bigint_len != b.bigint_len
    then
      return false
    else
      for i = 0 to  a.bigint_len - 1
      do
        if a.bigint_chiffres[i] != b.bigint_chiffres[i]
        then
          return false
        end
      end
      return true
    end
  end
end

def bool bigint_gt (@bigint a, @bigint b)
  //  Renvoie vrai si a > b 
  if a.bigint_sign && !b.bigint_sign
  then
    return true
  else
    if !a.bigint_sign && b.bigint_sign
    then
      return false
    else
      if a.bigint_len > b.bigint_len
      then
        return a.bigint_sign
      else
        if a.bigint_len < b.bigint_len
        then
          return !a.bigint_sign
        else
          for i = 0 to  a.bigint_len - 1
          do
            def int j = a.bigint_len - 1 - i
            if a.bigint_chiffres[j] > b.bigint_chiffres[j]
            then
              return a.bigint_sign
            else
              if a.bigint_chiffres[j] < b.bigint_chiffres[j]
              then
                return !a.bigint_sign
              end
            end
          end
        end
      end
      return true
    end
  end
end

def bool bigint_lt (@bigint a, @bigint b)
  return !bigint_gt(a, b)
end

def @bigint add_bigint_positif (@bigint a, @bigint b)
  //  Une addition ou on en a rien a faire des signes 
  def int len = max2(a.bigint_len, b.bigint_len) + 1
  def int retenue = 0
  def array<int> chiffres[len] with i do
                                        def int tmp = retenue
                                        if i < a.bigint_len
                                        then
                                          tmp = tmp + a.bigint_chiffres[i]
                                        end
                                        if i < b.bigint_len
                                        then
                                          tmp = tmp + b.bigint_chiffres[i]
                                        end
                                        retenue = tmp / 10
                                        return tmp % 10
  end
  while len > 0 && chiffres[len - 1] == 0
  do
    len = len - 1
  end
  return {"bigint_sign":true, "bigint_len":len, "bigint_chiffres":chiffres}
end

def @bigint sub_bigint_positif (@bigint a, @bigint b)
  /* Une soustraction ou on en a rien a faire des signes
Pré-requis : a > b
*/
  def int len = a.bigint_len
  def int retenue = 0
  def array<int> chiffres[len] with i do
                                        def int tmp = retenue + a.bigint_chiffres[i]
                                        if i < b.bigint_len
                                        then
                                          tmp = tmp - b.bigint_chiffres[i]
                                        end
                                        if tmp < 0
                                        then
                                          tmp = tmp + 10
                                          retenue = -1
                                        else
                                          retenue = 0
                                        end
                                        return tmp
  end
  while len > 0 && chiffres[len - 1] == 0
  do
    len = len - 1
  end
  return {"bigint_sign":true, "bigint_len":len, "bigint_chiffres":chiffres}
end

def @bigint neg_bigint (@bigint a)
  return {"bigint_sign":!a.bigint_sign, "bigint_len":a.bigint_len, "bigint_chiffres":a.bigint_chiffres}
end

def @bigint add_bigint (@bigint a, @bigint b)
  if a.bigint_sign == b.bigint_sign
  then
    if a.bigint_sign
    then
      return add_bigint_positif(a, b)
    else
      return neg_bigint(add_bigint_positif(a, b))
    end
  else
    if a.bigint_sign
    then
      //  a positif, b negatif 
      if bigint_gt(a, neg_bigint(b))
      then
        return sub_bigint_positif(a, b)
      else
        return neg_bigint(sub_bigint_positif(b, a))
      end
    else
      //  a negatif, b positif 
      if bigint_gt(neg_bigint(a), b)
      then
        return neg_bigint(sub_bigint_positif(a, b))
      else
        return sub_bigint_positif(b, a)
      end
    end
  end
end

def @bigint sub_bigint (@bigint a, @bigint b)
  return add_bigint(a, neg_bigint(b))
end

def @bigint mul_bigint_cp (@bigint a, @bigint b)
  /* Cet algorithm est quadratique.
C'est le même que celui qu'on enseigne aux enfants en CP.
D'ou le nom de la fonction. */
  def int len = a.bigint_len + b.bigint_len + 1
  def array<int> chiffres[len] with k do
                                        return 0
  end
  for i = 0 to  a.bigint_len - 1
  do
    def int retenue = 0
    for j = 0 to  b.bigint_len - 1
    do
      chiffres[i + j] = chiffres[i + j] + retenue + b.bigint_chiffres[j] * a.bigint_chiffres[i]
      retenue = chiffres[i + j] / 10
      chiffres[i + j] = chiffres[i + j] % 10
    end
    chiffres[i + b.bigint_len] = chiffres[i + b.bigint_len] + retenue
  end
  chiffres[a.bigint_len + b.bigint_len] = chiffres[a.bigint_len + b.bigint_len - 1] / 10
  chiffres[a.bigint_len + b.bigint_len - 1] = chiffres[a.bigint_len + b.bigint_len - 1] % 10
  for l = 0 to  2
  do
    if len != 0 && chiffres[len - 1] == 0
    then
      len = len - 1
    end
  end
  return {"bigint_sign":a.bigint_sign == b.bigint_sign, "bigint_len":len, "bigint_chiffres":chiffres}
end

def @bigint bigint_premiers_chiffres (@bigint a, int i)
  def int len = min2(i, a.bigint_len)
  while len != 0 && a.bigint_chiffres[len - 1] == 0
  do
    len = len - 1
  end
  return {"bigint_sign":a.bigint_sign, "bigint_len":len, "bigint_chiffres":a.bigint_chiffres}
end

def @bigint bigint_shift (@bigint a, int i)
  def array<int> chiffres[a.bigint_len + i] with k do
                                                     if k >= i
                                                     then
                                                       return a.bigint_chiffres[k - i]
                                                     else
                                                       return 0
                                                     end
  end
  return {"bigint_sign":a.bigint_sign, "bigint_len":a.bigint_len + i, "bigint_chiffres":chiffres}
end

def @bigint mul_bigint (@bigint aa, @bigint bb)
  if aa.bigint_len == 0
  then
    return aa
  else
    if bb.bigint_len == 0
    then
      return bb
    else
      if aa.bigint_len < 3 || bb.bigint_len < 3
      then
        return mul_bigint_cp(aa, bb)
      end
    end
  end
  //  Algorithme de Karatsuba 
  def int split = min2(aa.bigint_len, bb.bigint_len) / 2
  def @bigint a = bigint_shift(aa, -split)
  def @bigint b = bigint_premiers_chiffres(aa, split)
  def @bigint c = bigint_shift(bb, -split)
  def @bigint d = bigint_premiers_chiffres(bb, split)
  def @bigint amoinsb = sub_bigint(a, b)
  def @bigint cmoinsd = sub_bigint(c, d)
  def @bigint ac = mul_bigint(a, c)
  def @bigint bd = mul_bigint(b, d)
  def @bigint amoinsbcmoinsd = mul_bigint(amoinsb, cmoinsd)
  def @bigint acdec = bigint_shift(ac, 2 * split)
  return add_bigint(add_bigint(acdec, bd), bigint_shift(sub_bigint(add_bigint(ac, bd), amoinsbcmoinsd), split))
  //  ac × 102k + (ac + bd – (a – b)(c – d)) × 10k + bd 
end

/*
Division,
Modulo
*/
def int log10 (int a)
  def int out = 1
  while a >= 10
  do
    a = a / 10
    out = out + 1
  end
  return out
end

def @bigint bigint_of_int (int i)
  def int size = log10(i)
  if i == 0
  then
    size = 0
  end
  def array<int> t[size] with j do
                                  return 0
  end
  for k = 0 to  size - 1
  do
    t[k] = i % 10
    i = i / 10
  end
  return {"bigint_sign":true, "bigint_len":size, "bigint_chiffres":t}
end

def @bigint fact_bigint (@bigint a)
  def @bigint one = bigint_of_int(1)
  def @bigint out = one
  while !bigint_eq(a, one)
  do
    out = mul_bigint(a, out)
    a = sub_bigint(a, one)
  end
  return out
end

def int sum_chiffres_bigint (@bigint a)
  def int out = 0
  for i = 0 to  a.bigint_len - 1
  do
    out = out + a.bigint_chiffres[i]
  end
  return out
end

//  http://projecteuler.net/problem=20 
def int euler20 ()
  def @bigint a = bigint_of_int(15)
  //  normalement c'est 100 
  a = fact_bigint(a)
  return sum_chiffres_bigint(a)
end

def @bigint bigint_exp (@bigint a, int b)
  if b == 1
  then
    return a
  else
    if b % 2 == 0
    then
      return bigint_exp(mul_bigint(a, a), b / 2)
    else
      return mul_bigint(a, bigint_exp(a, b - 1))
    end
  end
end

def @bigint bigint_exp_10chiffres (@bigint a, int b)
  a = bigint_premiers_chiffres(a, 10)
  if b == 1
  then
    return a
  else
    if b % 2 == 0
    then
      return bigint_exp_10chiffres(mul_bigint(a, a), b / 2)
    else
      return mul_bigint(a, bigint_exp_10chiffres(a, b - 1))
    end
  end
end

def void euler48 ()
  def @bigint sum = bigint_of_int(0)
  for i = 1 to  100
  do
    //  1000 normalement 
    def @bigint ib = bigint_of_int(i)
    def @bigint ibeib = bigint_exp_10chiffres(ib, i)
    sum = add_bigint(sum, ibeib)
    sum = bigint_premiers_chiffres(sum, 10)
  end
  print string "euler 48 = "
  print_bigint(sum)
  print string "\n"
end

def int euler16 ()
  def @bigint a = bigint_of_int(2)
  a = bigint_exp(a, 100)
  //  1000 normalement 
  return sum_chiffres_bigint(a)
end

def int euler25 ()
  def int i = 2
  def @bigint a = bigint_of_int(1)
  def @bigint b = bigint_of_int(1)
  while b.bigint_len < 100
  do
    //  1000 normalement 
    def @bigint c = add_bigint(a, b)
    a = b
    b = c
    i = i + 1
  end
  return i
end

def int euler29 ()
  def int maxA = 5
  def int maxB = 5
  def array<@bigint> a_bigint[maxA + 1] with j do
                                                 return bigint_of_int(j * j)
  end
  def array<@bigint> a0_bigint[maxA + 1] with j2 do
                                                   return bigint_of_int(j2)
  end
  def array<int> b[maxA + 1] with k do
                                      return 2
  end
  def int n = 0
  def bool found = true
  while found
  do
    def @bigint min = a0_bigint[0]
    found = false
    for i = 2 to  maxA
    do
      if b[i] <= maxB
      then
        if found
        then
          if bigint_lt(a_bigint[i], min)
          then
            min = a_bigint[i]
          end
        else
          min = a_bigint[i]
          found = true
        end
      end
    end
    if found
    then
      n = n + 1
      for l = 2 to  maxA
      do
        if bigint_eq(a_bigint[l], min) && b[l] <= maxB
        then
          b[l] = b[l] + 1
          a_bigint[l] = mul_bigint(a_bigint[l], a0_bigint[l])
        end
      end
    end
  end
  return n
end

main
  print int euler29()
  print string "\n"
  def @bigint sum = read_bigint(50)
  for i = 2 to  100
  do
    skip
    def @bigint tmp = read_bigint(50)
    sum = add_bigint(sum, tmp)
  end
  print string "euler13 = "
  print_bigint(sum)
  print string "\n"
  print string "euler25 = "
  print int euler25()
  print string "\n"
  print string "euler16 = "
  print int euler16()
  print string "\n"
  euler48()
  print string "euler20 = "
  print int euler20()
  print string "\n"
  def @bigint a = bigint_of_int(999999)
  def @bigint b = bigint_of_int(9951263)
  print_bigint(a)
  print string ">>1="
  print_bigint(bigint_shift(a, -1))
  print string "\n"
  print_bigint(a)
  print string "*"
  print_bigint(b)
  print string "="
  print_bigint(mul_bigint(a, b))
  print string "\n"
  print_bigint(a)
  print string "*"
  print_bigint(b)
  print string "="
  print_bigint(mul_bigint_cp(a, b))
  print string "\n"
  print_bigint(a)
  print string "+"
  print_bigint(b)
  print string "="
  print_bigint(add_bigint(a, b))
  print string "\n"
  print_bigint(b)
  print string "-"
  print_bigint(a)
  print string "="
  print_bigint(sub_bigint(b, a))
  print string "\n"
  print_bigint(a)
  print string "-"
  print_bigint(b)
  print string "="
  print_bigint(sub_bigint(a, b))
  print string "\n"
  print_bigint(a)
  print string ">"
  print_bigint(b)
  print string "="
  print bool bigint_gt(a, b)
  print string "\n"
end

