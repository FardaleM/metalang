open System

let eof = ref false
let buffer = ref ""
let readChar_ () =
  if (!buffer) = "" then
    let tmp = Console.ReadLine()
    eof := tmp = null
    buffer := tmp + "\n"
  (!buffer).[0]

let consommeChar () =
  ignore (readChar_ ())
  buffer := (!buffer).[1..]

let stdin_sep () =
  let cond () =
    if !eof then
      false
    else
      let c = readChar_()
      c = ' ' || c = '\n' || c = '\t' || c = '\r'
  while cond () do
    consommeChar ()

let readInt () =
  let sign =
    if readChar_ () = '-' then
      consommeChar ()
      -1
    else 1
  let rec loop i =
    let c = readChar_ ()
    if c <= '9' && c >= '0' then
      consommeChar ()
      loop (i * 10 + (int c) - (int '0'))
    else
      i * sign
  loop 0
(* Ce code a été généré par metalang
   Il gère les entrées sorties pour un programme dynamique classique
   dans les épreuves de prologin
on le retrouve ici : http://projecteuler.net/problem=18
*)
let rec find0 len (tab:int array array) (cache:int array array) x y =
  (*
	Cette fonction est récursive
	*)
  if y = len - 1 then
    tab.[y].[x]
    
  else if x > y then
    (- 10000)
    
  else if cache.[y].[x] <> 0 then
    cache.[y].[x]
    
  else
      let result = ref( 0 )
      let out0 = find0 len tab cache x (y + 1)
      let out1 = find0 len tab cache (x + 1) (y + 1)
      if out0 > out1 then
        result := out0 + tab.[y].[x]
        
      else
        result := out1 + tab.[y].[x]
        
      cache.[y].[x] <- (!result)
      (!result)

let find len (tab:int array array) =
  let tab2 = Array.init len (fun i ->
    let tab3 = Array.create (i + 1) 0
    tab3)
  find0 len tab tab2 0 0

let () =
  let len = ref( 0 )
  len := readInt()
  stdin_sep();
  let tab = Array.init (!len) (fun i ->
    let tab2 = Array.init (i + 1) (fun _j ->
      let tmp = ref( 0 )
      tmp := readInt()
      stdin_sep();
      (!tmp))
    tab2)
  Printf.printf "%d\n" (find (!len) tab)
  for k = 0 to (!len) - 1 do
    for l = 0 to k do
      Printf.printf "%d " tab.[k].[l]
    Printf.printf "\n"
 