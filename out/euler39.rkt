#lang racket
(require racket/block)

(define main
  (let ([t0 (build-vector 1001 (lambda (i) 
                                 0))])
  (letrec ([d (lambda (a) 
                (if (<= a 1000)
                (letrec ([e (lambda (b) 
                              (if (<= b 1000)
                              (let ([c2 (+ (* a a) (* b b))])
                              (let ([c (integer-sqrt c2)])
                              (if (eq? (* c c) c2)
                              (let ([p (+ a b c)])
                              (if (<= p 1000)
                              (block
                                (vector-set! t0 p (+ (vector-ref t0 p) 1))
                                (e (+ b 1))
                                )
                              (e (+ b 1))))
                              (e (+ b 1)))))
                              (d (+ a 1))))])
                (e 1))
                (let ([j 0])
                (letrec ([f (lambda (k j) 
                              (if (<= k 1000)
                              (if (> (vector-ref t0 k) (vector-ref t0 j))
                              (let ([j k])
                              (f (+ k 1) j))
                              (f (+ k 1) j))
                              (display j)))])
                (f 1 j)))))])
(d 1)))
)

