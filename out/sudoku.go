package main
import "fmt"
import "os"
import "bufio"
var reader *bufio.Reader

func skip() {
  var c byte
  fmt.Fscanf(reader, "%c", &c)
  if c == '\n' || c == ' ' {
    skip()
  } else {
    reader.UnreadByte()
  }
}
/* lit un sudoku sur l'entrée standard */
func read_sudoku() []int{
  var out0 []int = make([]int, 9 * 9)
  for i := 0 ; i < 9 * 9; i++ {
    var k int
    fmt.Fscanf(reader, "%d", &k)
      skip()
      out0[i] = k;
  }
  return out0
}

/* affiche un sudoku */
func print_sudoku(sudoku0 []int) {
  for y := 0 ; y <= 8; y++ {
    for x := 0 ; x <= 8; x++ {
        fmt.Printf("%d ", sudoku0[x + y * 9]);
          if x % 3 == 2 {
            fmt.Printf(" ");
          }
      }
      fmt.Printf("\n");
      if y % 3 == 2 {
        fmt.Printf("\n");
      }
  }
  fmt.Printf("\n");
}

/* dit si les variables sont toutes différentes */
/* dit si les variables sont toutes différentes */
/* dit si le sudoku est terminé de remplir */
func sudoku_done(s []int) bool{
  for i := 0 ; i <= 80; i++ {
    if s[i] == 0 {
        return false
      }
  }
  return true
}

/* dit si il y a une erreur dans le sudoku */
func sudoku_error(s []int) bool{
  var out1 bool = false
  for x := 0 ; x <= 8; x++ {
    out1 = out1 || s[x] != 0 && s[x] == s[x + 9] || s[x] != 0 && s[x] == s[x + 9 * 2] || s[x + 9] != 0 && s[x + 9] == s[x + 9 * 2] || s[x] != 0 && s[x] == s[x + 9 * 3] || s[x + 9] != 0 && s[x + 9] == s[x + 9 * 3] || s[x + 9 * 2] != 0 && s[x + 9 * 2] == s[x + 9 * 3] || s[x] != 0 && s[x] == s[x + 9 * 4] || s[x + 9] != 0 && s[x + 9] == s[x + 9 * 4] || s[x + 9 * 2] != 0 && s[x + 9 * 2] == s[x + 9 * 4] || s[x + 9 * 3] != 0 && s[x + 9 * 3] == s[x + 9 * 4] || s[x] != 0 && s[x] == s[x + 9 * 5] || s[x + 9] != 0 && s[x + 9] == s[x + 9 * 5] || s[x + 9 * 2] != 0 && s[x + 9 * 2] == s[x + 9 * 5] || s[x + 9 * 3] != 0 && s[x + 9 * 3] == s[x + 9 * 5] || s[x + 9 * 4] != 0 && s[x + 9 * 4] == s[x + 9 * 5] || s[x] != 0 && s[x] == s[x + 9 * 6] || s[x + 9] != 0 && s[x + 9] == s[x + 9 * 6] || s[x + 9 * 2] != 0 && s[x + 9 * 2] == s[x + 9 * 6] || s[x + 9 * 3] != 0 && s[x + 9 * 3] == s[x + 9 * 6] || s[x + 9 * 4] != 0 && s[x + 9 * 4] == s[x + 9 * 6] || s[x + 9 * 5] != 0 && s[x + 9 * 5] == s[x + 9 * 6] || s[x] != 0 && s[x] == s[x + 9 * 7] || s[x + 9] != 0 && s[x + 9] == s[x + 9 * 7] || s[x + 9 * 2] != 0 && s[x + 9 * 2] == s[x + 9 * 7] || s[x + 9 * 3] != 0 && s[x + 9 * 3] == s[x + 9 * 7] || s[x + 9 * 4] != 0 && s[x + 9 * 4] == s[x + 9 * 7] || s[x + 9 * 5] != 0 && s[x + 9 * 5] == s[x + 9 * 7] || s[x + 9 * 6] != 0 && s[x + 9 * 6] == s[x + 9 * 7] || s[x] != 0 && s[x] == s[x + 9 * 8] || s[x + 9] != 0 && s[x + 9] == s[x + 9 * 8] || s[x + 9 * 2] != 0 && s[x + 9 * 2] == s[x + 9 * 8] || s[x + 9 * 3] != 0 && s[x + 9 * 3] == s[x + 9 * 8] || s[x + 9 * 4] != 0 && s[x + 9 * 4] == s[x + 9 * 8] || s[x + 9 * 5] != 0 && s[x + 9 * 5] == s[x + 9 * 8] || s[x + 9 * 6] != 0 && s[x + 9 * 6] == s[x + 9 * 8] || s[x + 9 * 7] != 0 && s[x + 9 * 7] == s[x + 9 * 8];
  }
  var out2 bool = false
  for x := 0 ; x <= 8; x++ {
    out2 = out2 || s[x * 9] != 0 && s[x * 9] == s[x * 9 + 1] || s[x * 9] != 0 && s[x * 9] == s[x * 9 + 2] || s[x * 9 + 1] != 0 && s[x * 9 + 1] == s[x * 9 + 2] || s[x * 9] != 0 && s[x * 9] == s[x * 9 + 3] || s[x * 9 + 1] != 0 && s[x * 9 + 1] == s[x * 9 + 3] || s[x * 9 + 2] != 0 && s[x * 9 + 2] == s[x * 9 + 3] || s[x * 9] != 0 && s[x * 9] == s[x * 9 + 4] || s[x * 9 + 1] != 0 && s[x * 9 + 1] == s[x * 9 + 4] || s[x * 9 + 2] != 0 && s[x * 9 + 2] == s[x * 9 + 4] || s[x * 9 + 3] != 0 && s[x * 9 + 3] == s[x * 9 + 4] || s[x * 9] != 0 && s[x * 9] == s[x * 9 + 5] || s[x * 9 + 1] != 0 && s[x * 9 + 1] == s[x * 9 + 5] || s[x * 9 + 2] != 0 && s[x * 9 + 2] == s[x * 9 + 5] || s[x * 9 + 3] != 0 && s[x * 9 + 3] == s[x * 9 + 5] || s[x * 9 + 4] != 0 && s[x * 9 + 4] == s[x * 9 + 5] || s[x * 9] != 0 && s[x * 9] == s[x * 9 + 6] || s[x * 9 + 1] != 0 && s[x * 9 + 1] == s[x * 9 + 6] || s[x * 9 + 2] != 0 && s[x * 9 + 2] == s[x * 9 + 6] || s[x * 9 + 3] != 0 && s[x * 9 + 3] == s[x * 9 + 6] || s[x * 9 + 4] != 0 && s[x * 9 + 4] == s[x * 9 + 6] || s[x * 9 + 5] != 0 && s[x * 9 + 5] == s[x * 9 + 6] || s[x * 9] != 0 && s[x * 9] == s[x * 9 + 7] || s[x * 9 + 1] != 0 && s[x * 9 + 1] == s[x * 9 + 7] || s[x * 9 + 2] != 0 && s[x * 9 + 2] == s[x * 9 + 7] || s[x * 9 + 3] != 0 && s[x * 9 + 3] == s[x * 9 + 7] || s[x * 9 + 4] != 0 && s[x * 9 + 4] == s[x * 9 + 7] || s[x * 9 + 5] != 0 && s[x * 9 + 5] == s[x * 9 + 7] || s[x * 9 + 6] != 0 && s[x * 9 + 6] == s[x * 9 + 7] || s[x * 9] != 0 && s[x * 9] == s[x * 9 + 8] || s[x * 9 + 1] != 0 && s[x * 9 + 1] == s[x * 9 + 8] || s[x * 9 + 2] != 0 && s[x * 9 + 2] == s[x * 9 + 8] || s[x * 9 + 3] != 0 && s[x * 9 + 3] == s[x * 9 + 8] || s[x * 9 + 4] != 0 && s[x * 9 + 4] == s[x * 9 + 8] || s[x * 9 + 5] != 0 && s[x * 9 + 5] == s[x * 9 + 8] || s[x * 9 + 6] != 0 && s[x * 9 + 6] == s[x * 9 + 8] || s[x * 9 + 7] != 0 && s[x * 9 + 7] == s[x * 9 + 8];
  }
  var out3 bool = false
  for x := 0 ; x <= 8; x++ {
    out3 = out3 || s[(x % 3) * 3 * 9 + (x / 3) * 3] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3] == s[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] || s[(x % 3) * 3 * 9 + (x / 3) * 3] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3] == s[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] || s[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] == s[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] || s[(x % 3) * 3 * 9 + (x / 3) * 3] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3] == s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] || s[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] == s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] || s[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] == s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] || s[(x % 3) * 3 * 9 + (x / 3) * 3] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3] == s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] || s[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] == s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] || s[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] == s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] || s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] != 0 && s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] == s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] || s[(x % 3) * 3 * 9 + (x / 3) * 3] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3] == s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] || s[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] == s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] || s[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] == s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] || s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] != 0 && s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] == s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] || s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] != 0 && s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] == s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] || s[(x % 3) * 3 * 9 + (x / 3) * 3] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3] || s[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3] || s[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3] || s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] != 0 && s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3] || s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] != 0 && s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3] || s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] != 0 && s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3] || s[(x % 3) * 3 * 9 + (x / 3) * 3] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 1] || s[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 1] || s[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 1] || s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] != 0 && s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 1] || s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] != 0 && s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 1] || s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] != 0 && s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 1] || s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3] != 0 && s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 1] || s[(x % 3) * 3 * 9 + (x / 3) * 3] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 2] || s[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 2] || s[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] != 0 && s[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 2] || s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] != 0 && s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 2] || s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] != 0 && s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 2] || s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] != 0 && s[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 2] || s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3] != 0 && s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 2] || s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 1] != 0 && s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 1] == s[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 2];
  }
  return out1 || out2 || out3
}

/* résout le sudoku*/
func solve(sudoku0 []int) bool{
  if sudoku_error(sudoku0) {
    return false
  }
  if sudoku_done(sudoku0) {
    return true
  }
  for i := 0 ; i <= 80; i++ {
    if sudoku0[i] == 0 {
        for p := 1 ; p <= 9; p++ {
            sudoku0[i] = p;
              if solve(sudoku0) {
                return true
              }
          }
          sudoku0[i] = 0;
          return false
      }
  }
  return false
}

func main() {
  reader = bufio.NewReader(os.Stdin)
  var sudoku0 []int = read_sudoku()
  print_sudoku(sudoku0);
  if solve(sudoku0) {
    print_sudoku(sudoku0);
  } else {
    fmt.Printf("no solution\n");
  }
}

