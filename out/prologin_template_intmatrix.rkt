#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))

(define (read_int_matrix x y)
  ;toto
  (let ([tab (array_init_withenv y (lambda (z) 
                                     (lambda (_) (let ([l (list->vector (map string->number (regexp-split " " (read-line))))])
                                                 (list '() l)))) '())])
  tab)
)
(define (programme_candidat tableau x y)
  ;toto
  (let ([out_ 0])
  (let ([h 0])
  (let ([k (- y 1)])
  (letrec ([d (lambda (i out_) 
                (if (<= i k)
                (let ([f 0])
                (let ([g (- x 1)])
                (letrec ([e (lambda (j out_) 
                              (if (<= j g)
                              (let ([out_ (+ out_ (* (vector-ref (vector-ref tableau i) j) (+ (* i 2) j)))])
                              (e (+ j 1) out_))
                              (d (+ i 1) out_)))])
                (e f out_))))
                out_))])
  (d h out_)))))
)
(define main
  (let ([taille_x (string->number (read-line))])
  (let ([taille_y (string->number (read-line))])
  (let ([tableau (read_int_matrix taille_x taille_y)])
  (block
    (map display (list (programme_candidat tableau taille_x taille_y) "\n"))
    ))))
)

