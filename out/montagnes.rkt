#lang racket
(require racket/block)
(define last-char 0)
(define next-char (lambda () (set! last-char (read-char (current-input-port)))))
(next-char)
(define mread-int (lambda ()
  (if (eq? #\- last-char)
  (block
    (next-char) (- 0 (mread-int)))
    (letrec ([w (lambda (out)
      (if (eof-object? last-char)
        out
        (if (and last-char (>= (char->integer last-char) (char->integer #\0)) (<= (char->integer last-char) (char->integer #\9)))
          (let ([out (+ (* 10 out) (- (char->integer last-char) (char->integer #\0)))])
            (block
              (next-char)
              (w out)
          ))
        out
      )))]) (w 0)))))
(define mread-blank (lambda ()
  (if (or (eq? last-char #\NewLine) (eq? last-char #\Space) ) (block (next-char) (mread-blank)) '())
))

(define (montagnes0 tab len)
  (let ([max0 1])
  (let ([j 1])
  (let ([i (- len 2)])
  (letrec ([a (lambda (i j max0) 
                (if (>= i 0)
                (let ([x (vector-ref tab i)])
                (letrec ([b (lambda (j) 
                              (if (and (>= j 0) (> x (vector-ref tab (- len j))))
                              (let ([j (- j 1)])
                              (b j))
                              (let ([j (+ j 1)])
                              (block
                                (vector-set! tab (- len j) x)
                                (let ([max0 (if (> j max0)
                                            (let ([max0 j])
                                            max0)
                                            max0)])
                                (let ([i (- i 1)])
                                (a i j max0)))
                                ))))])
                (b j)))
                max0))])
  (a i j max0)))))
)
(define main
  (let ([len 0])
  ((lambda (c) 
     (let ([len c])
     (block
       (mread-blank)
       (let ([tab (build-vector len (lambda (i) 
                                      (let ([x 0])
                                      ((lambda (d) 
                                         (let ([x d])
                                         (block
                                           (mread-blank)
                                           x
                                           ))) (mread-int)))))])
     (display (montagnes0 tab len)))
     ))) (mread-int)))
)

