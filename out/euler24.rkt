#lang racket
(require racket/block)

(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))
(define last-char 0)
(define next-char (lambda () (set! last-char (read-char (current-input-port)))))
(next-char)
(define mread-char (lambda ()
  (let ([ out last-char])
    (block
      (next-char)
      out
    ))))

(define mread-int (lambda ()
  (if (eq? #\- last-char)
  (block
    (next-char) (- 0 (mread-int)))
    (letrec ([w (lambda (out)
      (if (eof-object? last-char)
        out
        (if (and last-char (>= (char->integer last-char) (char->integer #\0)) (<= (char->integer last-char) (char->integer #\9)))
          (let ([out (+ (* 10 out) (- (char->integer last-char) (char->integer #\0)))])
            (block
              (next-char)
              (w out)
          ))
        out
      )))]) (w 0)))))

(define mread-blank (lambda ()
  (if (or (eq? last-char #\NewLine) (eq? last-char #\Space) ) (block (next-char) (mread-blank)) '())
))

(define fact (lambda (n) 
               (let ([prod 1])
                 (let ([w 2])
                   (let ([x n])
                     (letrec ([v (lambda (i prod n) 
                                   (if (<= i x)
                                     (let ([prod (* prod i)])
                                       (v (+ i 1) prod n))
                                     prod))])
                     (v w prod n)))))))
(define show (lambda (lim nth_) 
               (let ([t_ (array_init_withenv lim (lambda (i) 
                                                   (lambda (internal_env) (apply (lambda
                                                    (lim nth_) 
                                                   (let ([a i])
                                                     (list (list lim nth_) a))) internal_env))) (list lim nth_))])
               (let ([pris (array_init_withenv lim (lambda (j) 
                                                     (lambda (internal_env) (apply (lambda
                                                      (lim nth_) 
                                                     (let ([b #f])
                                                       (list (list lim nth_) b))) internal_env))) (list lim nth_))])
               (let ([s 1])
                 (let ([u (- lim 1)])
                   (letrec ([g (lambda (k lim nth_) 
                                 (if (<= k u)
                                   (let ([n (fact (- lim k))])
                                     (let ([nchiffre (quotient nth_ n)])
                                       (let ([nth_ (remainder nth_ n)])
                                         (let ([q 0])
                                           (let ([r (- lim 1)])
                                             (letrec ([h (lambda (l nchiffre n lim nth_) 
                                                           (if (<= l r)
                                                             (let ([o 
                                                               (lambda (nchiffre n lim nth_) 
                                                                 (h (+ l 1) nchiffre n lim nth_))])
                                                             (if (not (vector-ref pris l))
                                                               (let ([p 
                                                                 (lambda (nchiffre n lim nth_) 
                                                                   (let ([nchiffre (- nchiffre 1)])
                                                                    (o nchiffre n lim nth_)))])
                                                               (if (eq? nchiffre 0)
                                                                 (block
                                                                   (display l)
                                                                   (vector-set! pris l #t)
                                                                   (p nchiffre n lim nth_)
                                                                   )
                                                                 (p nchiffre n lim nth_)))
                                                             (o nchiffre n lim nth_)))
                                               (g (+ k 1) lim nth_)))])
                                         (h q nchiffre n lim nth_)))))))
                   (let ([e 0])
                     (let ([f (- lim 1)])
                       (letrec ([c (lambda (m lim nth_) 
                                     (if (<= m f)
                                       (let ([d (lambda (lim nth_) 
                                                  (c (+ m 1) lim nth_))])
                                       (if (not (vector-ref pris m))
                                         (block
                                           (display m)
                                           (d lim nth_)
                                           )
                                         (d lim nth_)))
                                     (display "\n")))])
                     (c e lim nth_))))))])
(g s lim nth_))))))))
(define main (block
               (show 10 999999)
               '()
               ))

