#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))

(define (fact n)
  ;toto
  (let ([prod 1])
  (let ([s 2])
  (let ([u n])
  (letrec ([r (lambda (i prod) 
                (if (<= i u)
                (let ([prod (* prod i)])
                (r (+ i 1) prod))
                prod))])
  (r s prod)))))
)
(define (show lim nth0)
  ;toto
  (let ([t0 (array_init_withenv lim (lambda (i) 
                                      (lambda (_) (let ([a i])
                                                  (list '() a)))) '())])
  (let ([pris (array_init_withenv lim (lambda (j) 
                                        (lambda (_) (let ([b #f])
                                                    (list '() b)))) '())])
  (let ([p 1])
  (let ([q (- lim 1)])
  (letrec ([f (lambda (k nth0) 
                (if (<= k q)
                (let ([n (fact (- lim k))])
                (let ([nchiffre (quotient nth0 n)])
                (let ([nth0 (remainder nth0 n)])
                (let ([h 0])
                (let ([o (- lim 1)])
                (letrec ([g (lambda (l nchiffre) 
                              (if (<= l o)
                              (let ([nchiffre (if (not (vector-ref pris l))
                                              (block
                                                (if (eq? nchiffre 0)
                                                (block
                                                  (display l)
                                                  (vector-set! pris l #t)
                                                  )
                                                '())
                                                (let ([nchiffre (- nchiffre 1)])
                                                nchiffre)
                                                )
                                              nchiffre)])
                              (g (+ l 1) nchiffre))
                              (f (+ k 1) nth0)))])
                (g h nchiffre)))))))
                (let ([d 0])
                (let ([e (- lim 1)])
                (letrec ([c (lambda (m) 
                              (if (<= m e)
                              (block
                                (if (not (vector-ref pris m))
                                (display m)
                                '())
                                (c (+ m 1))
                                )
                              (display "\n")))])
                (c d))))))])
  (f p nth0))))))
)
(define main
  (block
    (show 10 999999)
    '()
    )
)

