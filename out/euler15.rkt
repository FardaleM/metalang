#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))

(define main
  (let ([n 10])
  ; normalement on doit mettre 20 mais l√† on se tape un overflow 
  (let ([n (+ n 1)])
  (let ([tab (array_init_withenv n (lambda (i) 
                                     (lambda (_) (let ([tab2 (array_init_withenv n 
                                                 (lambda (j) 
                                                   (lambda (_) (let ([b 0])
                                                               (list '() b)))) '())])
                                     (let ([a tab2])
                                     (list '() a))))) '())])
  (let ([ba 0])
  (let ([bb (- n 1)])
  (letrec ([z (lambda (l) 
                (if (<= l bb)
                (block
                  (vector-set! (vector-ref tab (- n 1)) l 1)
                  (vector-set! (vector-ref tab l) (- n 1) 1)
                  (z (+ l 1))
                  )
                (let ([x 2])
                (let ([y n])
                (letrec ([s (lambda (o) 
                              (if (<= o y)
                              (let ([r (- n o)])
                              (let ([v 2])
                              (let ([w n])
                              (letrec ([u (lambda (p) 
                                            (if (<= p w)
                                            (let ([q (- n p)])
                                            (block
                                              (vector-set! (vector-ref tab r) q (+ (vector-ref (vector-ref tab (+ r 1)) q) (vector-ref (vector-ref tab r) (+ q 1))))
                                              (u (+ p 1))
                                              ))
                                            (s (+ o 1))))])
                              (u v)))))
                              (let ([g 0])
                              (let ([h (- n 1)])
                              (letrec ([c (lambda (m) 
                                            (if (<= m h)
                                            (let ([e 0])
                                            (let ([f (- n 1)])
                                            (letrec ([d (lambda (k) 
                                                          (if (<= k f)
                                                          (block
                                                            (display (vector-ref (vector-ref tab m) k))
                                                            (display " ")
                                                            (d (+ k 1))
                                                            )
                                                          (block
                                                            (display "\n")
                                                            (c (+ m 1))
                                                            )))])
                                            (d e))))
                                            (block
                                              (display (vector-ref (vector-ref tab 0) 0))
                                              (display "\n")
                                              )))])
                              (c g))))))])
                (s x))))))])
(z ba)))))))
)

