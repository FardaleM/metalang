#lang racket
(require racket/block)

(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))
(define last-char 0)
(define next-char (lambda () (set! last-char (read-char (current-input-port)))))
(next-char)
(define mread-char (lambda ()
  (let ([ out last-char])
    (block
      (next-char)
      out
    ))))

(define mread-int (lambda ()
  (if (eq? #\- last-char)
  (block
    (next-char) (- 0 (mread-int)))
    (letrec ([w (lambda (out)
      (if (eof-object? last-char)
        out
        (if (and last-char (>= (char->integer last-char) (char->integer #\0)) (<= (char->integer last-char) (char->integer #\9)))
          (let ([out (+ (* 10 out) (- (char->integer last-char) (char->integer #\0)))])
            (block
              (next-char)
              (w out)
          ))
        out
      )))]) (w 0)))))

(define mread-blank (lambda ()
  (if (or (eq? last-char #\NewLine) (eq? last-char #\Space) ) (block (next-char) (mread-blank)) '())
))

(define read_int (lambda () 
                   ((lambda (out_) 
                      (block (mread-blank) out_ )) (mread-int))))
(define read_int_line (lambda (n) 
                        (let ([tab (array_init_withenv n (lambda (i) 
                                                           (lambda (n) 
                                                             ((lambda (t_) 
                                                                (block (mread-blank) 
                                                                (let ([b t_])
                                                                  (list n b)) )) (mread-int)))) n)])
tab)))
(define read_char_line (lambda (n) 
                         (let ([tab (array_init_withenv n (lambda (i) 
                                                            (lambda (n) 
                                                              ((lambda (t_) 
                                                                 (let ([a t_])
                                                                   (list n a))) (mread-char)))) n)])
(block (mread-blank) tab ))))
(define main (let ([len (read_int )])
               (block
                 (display len)
                 (display "=len\n")
                 (let ([tab (read_int_line len)])
                   (let ([r 0])
                     (let ([s (- len 1)])
                       (letrec ([q (lambda (i tab len) 
                                     (if (<= i s)
                                       (block
                                         (display i)
                                         (display "=>")
                                         (display (vector-ref tab i))
                                         (display " ")
                                         (q (+ i 1) tab len)
                                         )
                                       (block
                                         (display "\n")
                                         (let ([tab2 (read_int_line len)])
                                           (let ([o 0])
                                             (let ([p (- len 1)])
                                               (letrec ([m (lambda (i_ tab2 tab len) 
                                                             (if (<= i_ p)
                                                               (block
                                                                 (display i_)
                                                                 (display "==>")
                                                                 (display (vector-ref tab2 i_))
                                                                 (display " ")
                                                                 (m (+ i_ 1) tab2 tab len)
                                                                 )
                                                               (let ([strlen (read_int )])
                                                                 (block
                                                                   (display strlen)
                                                                   (display "=strlen\n")
                                                                   (let ([tab4 (read_char_line strlen)])
                                                                    (let ([k 0])
                                                                    (let ([l (- strlen 1)])
                                                                    (letrec ([g 
                                                                    (lambda (i3 tab4 strlen tab2 tab len) 
                                                                    (if (<= i3 l)
                                                                    (let ([tmpc (vector-ref tab4 i3)])
                                                                    (let ([c (char->integer tmpc)])
                                                                    (block
                                                                    (display tmpc)
                                                                    (display ":")
                                                                    (display c)
                                                                    (display " ")
                                                                    (let ([h 
                                                                    (lambda (c tmpc tab4 strlen tab2 tab len) 
                                                                    (block
                                                                    (vector-set! tab4 i3 (integer->char c))
                                                                    (g (+ i3 1) tab4 strlen tab2 tab len)
                                                                    ))])
                                                                    (if (not (eq? tmpc #\Space))
                                                                    (let ([c (+ (remainder (+ (- c (char->integer #\a)) 13) 26) (char->integer #\a))])
                                                                    (h c tmpc tab4 strlen tab2 tab len))
                                                                    (h c tmpc tab4 strlen tab2 tab len)))
                                                                    )))
                                                                    (let ([e 0])
                                                                    (let ([f (- strlen 1)])
                                                                    (letrec ([d 
                                                                    (lambda (j tab4 strlen tab2 tab len) 
                                                                    (if (<= j f)
                                                                    (block
                                                                    (display (vector-ref tab4 j))
                                                                    (d (+ j 1) tab4 strlen tab2 tab len)
                                                                    )
                                                                    '()))])
                                                                    (d e tab4 strlen tab2 tab len))))))])
                                                                    (g k tab4 strlen tab2 tab len)))))
                                                             ))))])
                                         (m o tab2 tab len)))))
                       )))])
               (q r tab len)))))
)))

