#lang racket
(require racket/block)

(define main
  (let ([a (string->number (read-line))])
  (let ([len a])
  (block
    (map display (list len "=len\n"))
    (let ([b (list->vector (map string->number (regexp-split " " (read-line))))])
    (let ([tab b])
    (let ([u 0])
    (let ([v (- len 1)])
    (letrec ([s (lambda (i) 
                  (if (<= i v)
                  (block
                    (map display (list i "=>" (vector-ref tab i) " "))
                    (s (+ i 1))
                    )
                  (block
                    (display "\n")
                    (let ([d (list->vector (map string->number (regexp-split " " (read-line))))])
                    (let ([tab2 d])
                    (let ([q 0])
                    (let ([r (- len 1)])
                    (letrec ([p (lambda (i_) 
                                  (if (<= i_ r)
                                  (block
                                    (map display (list i_ "==>" (vector-ref tab2 i_) " "))
                                    (p (+ i_ 1))
                                    )
                                  (let ([e (string->number (read-line))])
                                  (let ([strlen e])
                                  (block
                                    (map display (list strlen "=strlen\n"))
                                    (let ([f (list->vector (string->list (read-line)))])
                                    (let ([tab4 f])
                                    (let ([m 0])
                                    (let ([o (- strlen 1)])
                                    (letrec ([l (lambda (i3) 
                                                  (if (<= i3 o)
                                                  (let ([tmpc (vector-ref tab4 i3)])
                                                  (let ([c (char->integer tmpc)])
                                                  (block
                                                    (map display (list tmpc ":" c " "))
                                                    (let ([c (if (not (eq? tmpc #\Space))
                                                             (let ([c (+ (remainder (+ (- c (char->integer #\a)) 13) 26) (char->integer #\a))])
                                                             c)
                                                             c)])
                                                    (block
                                                      (vector-set! tab4 i3 (integer->char c))
                                                      (l (+ i3 1))
                                                      ))
                                                    )))
                                                  (let ([h 0])
                                                  (let ([k (- strlen 1)])
                                                  (letrec ([g (lambda (j) 
                                                                (if (<= j k)
                                                                (block
                                                                  (display (vector-ref tab4 j))
                                                                  (g (+ j 1))
                                                                  )
                                                                '()))])
                                                  (g h))))))])
                                    (l m))))))
                                  )))))])
                    (p q))))))
      )))])
    (s u))))))
)))
)

