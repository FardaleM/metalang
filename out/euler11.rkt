#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))

(define (find0 n m x y dx dy)
  ;toto
  (let ([p (lambda (_) 
             '())])
  (if (or (or (or (< x 0) (eq? x 20)) (< y 0)) (eq? y 20))
  (- 1)
  (let ([q (lambda (_) 
             (p 'nil))])
  (if (eq? n 0)
  1
  (* (vector-ref (vector-ref m y) x) (find0 (- n 1) m (+ x dx) (+ y dy) dx dy))))))
)
(define main
  (let ([directions (array_init_withenv 8 (lambda (i) 
                                            (lambda (_) (let ([s (lambda (_) 
                                                                   (lambda (r) 
                                                                    (list '() r)))])
  (if (eq? i 0)
  (let ([r (list 0 1)])
  (list '() r))
  (let ([u (lambda (_) 
             (s 'nil))])
  (if (eq? i 1)
  (let ([r (list 1 0)])
  (list '() r))
  (let ([v (lambda (_) 
             (u 'nil))])
  (if (eq? i 2)
  (let ([r (list 0 (- 1))])
  (list '() r))
  (let ([w (lambda (_) 
             (v 'nil))])
  (if (eq? i 3)
  (let ([r (list (- 1) 0)])
  (list '() r))
  (let ([ba (lambda (_) 
              (w 'nil))])
  (if (eq? i 4)
  (let ([r (list 1 1)])
  (list '() r))
  (let ([bb (lambda (_) 
              (ba 'nil))])
  (if (eq? i 5)
  (let ([r (list 1 (- 1))])
  (list '() r))
  (let ([bc (lambda (_) 
              (bb 'nil))])
  (if (eq? i 6)
  (let ([r (list (- 1) 1)])
  (list '() r))
  (let ([r (list (- 1) (- 1))])
  (list '() r)))))))))))))))))) '())])
(let ([max0 0])
(let ([m (array_init_withenv 20 (lambda (h) 
                                  (lambda (_) (let ([bd (list->vector (map string->number (regexp-split " " (read-line))))])
                                              (list '() bd)))) '())])
(let ([bl 0])
(let ([bm 7])
(letrec ([be (lambda (j max0) 
               (if (<= j bm)
               ((lambda (internal_env) (apply (lambda (dx dy) 
                                                     (let ([bj 0])
                                                     (let ([bk 19])
                                                     (letrec ([bf (lambda (x max0) 
                                                                    (if (<= x bk)
                                                                    (let ([bh 0])
                                                                    (let ([bi 19])
                                                                    (letrec ([bg 
                                                                    (lambda (y max0) 
                                                                    (if (<= y bi)
                                                                    (let ([o (find0 4 m x y dx dy)])
                                                                    (let ([l (max max0 o)])
                                                                    (let ([max0 l])
                                                                    (bg (+ y 1) max0))))
                                                                    (bf (+ x 1) max0)))])
                                                                    (bg bh max0))))
                                                                    (be (+ j 1) max0)))])
                                                     (bf bj max0))))) internal_env)) (vector-ref directions j))
  (block
    (map display (list max0 "\n"))
    )))])
(be bl max0)))))))
)

