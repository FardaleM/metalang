#lang racket
(require racket/block)

(define (find0 n m x y dx dy)
  ;toto
  (if (or (or (or (< x 0) (eq? x 20)) (< y 0)) (eq? y 20))
  (- 1)
  (if (eq? n 0)
  1
  (* (vector-ref (vector-ref m y) x) (find0 (- n 1) m (+ x dx) (+ y dy) dx dy))))
)
(define main
  (let ([directions (build-vector 8 (lambda (i) 
                                      (if (eq? i 0)
                                      (list 0 1)
                                      (if (eq? i 1)
                                      (list 1 0)
                                      (if (eq? i 2)
                                      (list 0 (- 1))
                                      (if (eq? i 3)
                                      (list (- 1) 0)
                                      (if (eq? i 4)
                                      (list 1 1)
                                      (if (eq? i 5)
                                      (list 1 (- 1))
                                      (if (eq? i 6)
                                      (list (- 1) 1)
                                      (list (- 1) (- 1)))))))))))])
  (let ([max0 0])
  (let ([m (build-vector 20 (lambda (c) 
                              (list->vector (map string->number (regexp-split " " (read-line))))))])
  (letrec ([h (lambda (j max0) 
                (if (<= j 7)
                ((lambda (internal_env) (apply (lambda (dx dy) 
                                                      (letrec ([k (lambda (x max0) 
                                                                    (if (<= x 19)
                                                                    (letrec ([l (lambda (y max0) 
                                                                                (if (<= y 19)
                                                                                (let ([max0 (max max0 (find0 4 m x y dx dy))])
                                                                                (l (+ y 1) max0))
                                                                                (k (+ x 1) max0)))])
                                                                    (l 0 max0))
                                                                    (h (+ j 1) max0)))])
                (k 0 max0))) internal_env)) (vector-ref directions j))
    (printf "~a\n" max0)))])
(h 0 max0)))))
)

