#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))

(define (max2 a b)
  ;toto
  (max a b)
)
(define (read_int_matrix x y)
  ;toto
  (let ([tab (array_init_withenv y (lambda (z) 
                                     (lambda (_) (let ([c (list->vector (map string->number (regexp-split " " (read-line))))])
                                                 (let ([f c])
                                                 (list '() f))))) '())])
  tab)
)
(define (find_ n m x y dx dy)
  ;toto
  (let ([d (lambda (_) 
             '())])
  (if (or (or (or (< x 0) (eq? x 20)) (< y 0)) (eq? y 20))
  (- 1)
  (let ([e (lambda (_) 
             (d 'nil))])
  (if (eq? n 0)
  1
  (* (vector-ref (vector-ref m y) x) (find_ (- n 1) m (+ x dx) (+ y dy) dx dy))))))
)
(define main
  (let ([directions (array_init_withenv 8 (lambda (i) 
                                            (lambda (_) (let ([h (lambda (_) 
                                                                   (lambda (g) 
                                                                    (list '() g)))])
  (if (eq? i 0)
  (let ([g (list 0 1)])
  (list '() g))
  (let ([k (lambda (_) 
             (h 'nil))])
  (if (eq? i 1)
  (let ([g (list 1 0)])
  (list '() g))
  (let ([l (lambda (_) 
             (k 'nil))])
  (if (eq? i 2)
  (let ([g (list 0 (- 1))])
  (list '() g))
  (let ([o (lambda (_) 
             (l 'nil))])
  (if (eq? i 3)
  (let ([g (list (- 1) 0)])
  (list '() g))
  (let ([p (lambda (_) 
             (o 'nil))])
  (if (eq? i 4)
  (let ([g (list 1 1)])
  (list '() g))
  (let ([q (lambda (_) 
             (p 'nil))])
  (if (eq? i 5)
  (let ([g (list 1 (- 1))])
  (list '() g))
  (let ([r (lambda (_) 
             (q 'nil))])
  (if (eq? i 6)
  (let ([g (list (- 1) 1)])
  (list '() g))
  (let ([g (list (- 1) (- 1))])
  (list '() g)))))))))))))))))) '())])
(let ([max_ 0])
(let ([m (read_int_matrix 20 20)])
(let ([bd 0])
(let ([be 7])
(letrec ([s (lambda (j max_) 
              (if (<= j be)
              ((lambda (internal_env) (apply (lambda (dx dy) 
                                                    (let ([bb 0])
                                                    (let ([bc 19])
                                                    (letrec ([u (lambda (x max_) 
                                                                  (if (<= x bc)
                                                                  (let ([w 0])
                                                                  (let ([ba 19])
                                                                  (letrec ([v 
                                                                    (lambda (y max_) 
                                                                    (if (<= y ba)
                                                                    (let ([max_ (max2 max_ (find_ 4 m x y dx dy))])
                                                                    (v (+ y 1) max_))
                                                                    (u (+ x 1) max_)))])
                                                                  (v w max_))))
                                                                  (s (+ j 1) max_)))])
                                                    (u bb max_))))) internal_env)) (vector-ref directions j))
  (block
    (map display (list max_ "\n"))
    )))])
(s bd max_)))))))
)

