#lang racket
(require racket/block)

(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))
(define last-char 0)
(define next-char (lambda () (set! last-char (read-char (current-input-port)))))
(next-char)
(define mread-char (lambda ()
  (let ([ out last-char])
    (block
      (next-char)
      out
    ))))

(define mread-int (lambda ()
  (if (eq? #\- last-char)
  (block
    (next-char) (- 0 (mread-int)))
    (letrec ([w (lambda (out)
      (if (eof-object? last-char)
        out
        (if (and last-char (>= (char->integer last-char) (char->integer #\0)) (<= (char->integer last-char) (char->integer #\9)))
          (let ([out (+ (* 10 out) (- (char->integer last-char) (char->integer #\0)))])
            (block
              (next-char)
              (w out)
          ))
        out
      )))]) (w 0)))))

(define mread-blank (lambda ()
  (if (or (eq? last-char #\NewLine) (eq? last-char #\Space) ) (block (next-char) (mread-blank)) '())
))

(define max2 (lambda (a b) 
               (let ([h (lambda (a b) 
                          '())])
               (if (> a b)
                 a
                 b))))
(define read_int_line (lambda (n) 
                        (let ([tab (array_init_withenv n (lambda (i) 
                                                           (lambda (n) 
                                                             ((lambda (t_) 
                                                                (block (mread-blank) 
                                                                (let ([g t_])
                                                                  (list n g)) )) (mread-int)))) n)])
tab)))
(define read_int_matrix (lambda (x y) 
                          (let ([tab (array_init_withenv y (lambda (z) 
                                                             (lambda (internal_env) (apply (lambda
                                                              (x y) 
                                                             (let ([f (read_int_line x)])
                                                               (list (list x y) f))) internal_env))) (list x y))])
                          tab)))
(define find_ (lambda (n m x y dx dy) 
                (let ([d (lambda (n m x y dx dy) 
                           '())])
                (if (or (or (or (< x 0) (eq? x 20)) (< y 0)) (eq? y 20))
                  (- 1)
                  (let ([e (lambda (n m x y dx dy) 
                             (d n m x y dx dy))])
                  (if (eq? n 0)
                    1
                    (* (vector-ref (vector-ref m y) x) (find_ (- n 1) m (+ x dx) (+ y dy) dx dy))))))))
(define main (let ([c 8])
               (let ([directions (array_init_withenv c (lambda (i) 
                                                         (lambda (c) 
                                                           (let ([l (lambda (i c) 
                                                                    (lambda (k) 
                                                                    (list c k)))])
                                                         (if (eq? i 0)
                                                           (let ([k (list 0 1)])
                                                             (list c k))
                                                           (let ([o (lambda (i c) 
                                                                    (l i c))])
                                                           (if (eq? i 1)
                                                             (let ([k (list 1 0)])
                                                               (list c k))
                                                             (let ([p 
                                                               (lambda (i c) 
                                                                 (o i c))])
                                                             (if (eq? i 2)
                                                               (let ([k (list 0 (- 1))])
                                                                 (list c k))
                                                               (let ([q 
                                                                 (lambda (i c) 
                                                                   (p i c))])
                                                               (if (eq? i 3)
                                                                 (let ([k (list (- 1) 0)])
                                                                   (list c k))
                                                                 (let ([r 
                                                                   (lambda (i c) 
                                                                    (q i c))])
                                                                 (if (eq? i 4)
                                                                   (let ([k (list 1 1)])
                                                                    (list c k))
                                                                   (let ([s 
                                                                    (lambda (i c) 
                                                                    (r i c))])
                                                                   (if (eq? i 5)
                                                                    (let ([k (list 1 (- 1))])
                                                                    (list c k))
                                                                    (let ([u 
                                                                    (lambda (i c) 
                                                                    (s i c))])
                                                                    (if (eq? i 6)
                                                                    (let ([k (list (- 1) 1)])
                                                                    (list c k))
                                                                    (let ([k (list (- 1) (- 1))])
                                                                    (list c k)))))))))))))))))) c)])
(let ([max_ 0])
  (let ([m (read_int_matrix 20 20)])
    (let ([bf 0])
      (let ([bg 7])
        (letrec ([v (lambda (j m max_ c) 
                      (if (<= j bg)
                        ((lambda (internal_env) (apply (lambda (dx dy) 
                                                              (let ([bd 0])
                                                                (let ([be 19])
                                                                  (letrec ([w 
                                                                    (lambda (x dx dy m max_ c) 
                                                                    (if (<= x be)
                                                                    (let ([bb 0])
                                                                    (let ([bc 19])
                                                                    (letrec ([ba 
                                                                    (lambda (y dx dy m max_ c) 
                                                                    (if (<= y bc)
                                                                    (let ([max_ (max2 max_ (find_ 4 m x y dx dy))])
                                                                    (ba (+ y 1) dx dy m max_ c))
                                                                    (w (+ x 1) dx dy m max_ c)))])
                                                                    (ba bb dx dy m max_ c))))
                                                                    (v (+ j 1) m max_ c)))])
                                                                (w bd dx dy m max_ c))))) internal_env)) (vector-ref directions j))
          (block
            (display max_)
            (display "\n")
            )))])
    (v bf m max_ c)))))))))

