#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (let ((tab (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    ))))) (list env tab))))

(define (find0 n m x y dx dy)
  ;toto
  (let ([d (lambda (_) 
             '())])
  (if (or (or (or (< x 0) (eq? x 20)) (< y 0)) (eq? y 20))
  (- 1)
  (let ([e (lambda (_) 
             (d 'nil))])
  (if (eq? n 0)
  1
  (* (vector-ref (vector-ref m y) x) (find0 (- n 1) m (+ x dx) (+ y dy) dx dy))))))
)
(define main
  ((lambda (internal_env) (apply (lambda (g directions) 
                                        (block
                                          g
                                          (let ([max0 0])
                                          ((lambda (internal_env) (apply (lambda (u m) 
                                                                                (block
                                                                                u
                                                                                (let ([bf 0])
                                                                                (let ([bg 7])
                                                                                (letrec ([v 
                                                                                (lambda (j max0) 
                                                                                (if (<= j bg)
                                                                                ((lambda (internal_env) (apply (lambda
                                                                                 (dx dy) 
                                                                                (let ([bd 0])
                                                                                (let ([be 19])
                                                                                (letrec ([w 
                                                                                (lambda (x max0) 
                                                                                (if (<= x be)
                                                                                (let ([bb 0])
                                                                                (let ([bc 19])
                                                                                (letrec ([ba 
                                                                                (lambda (y max0) 
                                                                                (if (<= y bc)
                                                                                (let ([max0 (max max0 (find0 4 m x y dx dy))])
                                                                                (ba (+ y 1) max0))
                                                                                (w (+ x 1) max0)))])
                                                                                (ba bb max0))))
                                                                                (v (+ j 1) max0)))])
                                                                                (w bd max0))))) internal_env)) (vector-ref directions j))
                                                                                (block
                                                                                (map display (list max0 "\n"))
                                                                                )))])
                                                                                (v bf max0))))
                                          )) internal_env)) (array_init_withenv 20 
  (lambda (c) 
    (lambda (_) (let ([s (list->vector (map string->number (regexp-split " " (read-line))))])
                (list '() s)))) '())))
)) internal_env)) (array_init_withenv 8 (lambda (i) 
                                          (lambda (_) (let ([h (lambda (_) 
                                                                 (lambda (f) 
                                                                   (list '() f)))])
(if (eq? i 0)
(let ([f (list 0 1)])
(list '() f))
(let ([k (lambda (_) 
           (h 'nil))])
(if (eq? i 1)
(let ([f (list 1 0)])
(list '() f))
(let ([l (lambda (_) 
           (k 'nil))])
(if (eq? i 2)
(let ([f (list 0 (- 1))])
(list '() f))
(let ([o (lambda (_) 
           (l 'nil))])
(if (eq? i 3)
(let ([f (list (- 1) 0)])
(list '() f))
(let ([p (lambda (_) 
           (o 'nil))])
(if (eq? i 4)
(let ([f (list 1 1)])
(list '() f))
(let ([q (lambda (_) 
           (p 'nil))])
(if (eq? i 5)
(let ([f (list 1 (- 1))])
(list '() f))
(let ([r (lambda (_) 
           (q 'nil))])
(if (eq? i 6)
(let ([f (list (- 1) 1)])
(list '() f))
(let ([f (list (- 1) (- 1))])
(list '() f)))))))))))))))))) '()))
)

