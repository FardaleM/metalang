#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))
(define last-char 0)
(define next-char (lambda () (set! last-char (read-char (current-input-port)))))
(next-char)
(define mread-char (lambda ()
  (let ([ out last-char])
    (block
      (next-char)
      out
    ))))
(define mread-int (lambda ()
  (if (eq? #\- last-char)
  (block
    (next-char) (- 0 (mread-int)))
    (letrec ([w (lambda (out)
      (if (eof-object? last-char)
        out
        (if (and last-char (>= (char->integer last-char) (char->integer #\0)) (<= (char->integer last-char) (char->integer #\9)))
          (let ([out (+ (* 10 out) (- (char->integer last-char) (char->integer #\0)))])
            (block
              (next-char)
              (w out)
          ))
        out
      )))]) (w 0)))))
(define mread-blank (lambda ()
  (if (or (eq? last-char #\NewLine) (eq? last-char #\Space) ) (block (next-char) (mread-blank)) '())
))

(define is_number (lambda (c) 
                    (and (<= (char->integer c) (char->integer #\9)) (>= (char->integer c) (char->integer #\0)))))
(define npi_ (lambda (str len) 
               (let ([stack (array_init_withenv len (lambda (i) 
                                                      (lambda (_) (let ([a 0])
                                                                    (list '() a)))) '())])
               (let ([ptrStack 0])
                 (let ([ptrStr 0])
                   (letrec ([d (lambda (ptrStack ptrStr) 
                                 (if (< ptrStr len)
                                   ((lambda (internal_env) (apply (lambda
                                    (ptrStack ptrStr) 
                                   (d ptrStack ptrStr)) internal_env)) 
                                   (if (eq? (vector-ref str ptrStr) #\Space)
                                     (let ([ptrStr (+ ptrStr 1)])
                                       (list ptrStack ptrStr))
                                     ((lambda (internal_env) (apply (lambda
                                      (ptrStack ptrStr) 
                                     (list ptrStack ptrStr)) internal_env)) 
                                     (if (is_number (vector-ref str ptrStr))
                                       (let ([num 0])
                                         (letrec ([f (lambda (num ptrStr) 
                                                       (if (not (eq? (vector-ref str ptrStr) #\Space))
                                                         (let ([num (- (+ (* num 10) (char->integer (vector-ref str ptrStr))) (char->integer #\0))])
                                                           (let ([ptrStr (+ ptrStr 1)])
                                                             (f num ptrStr)))
                                                         (block
                                                           (vector-set! stack ptrStack num)
                                                           (let ([ptrStack (+ ptrStack 1)])
                                                             (list ptrStack ptrStr))
                                                           )))])
                                         (f num ptrStr)))
                                     ((lambda (internal_env) (apply (lambda
                                      (ptrStack ptrStr) 
                                     (list ptrStack ptrStr)) internal_env)) 
                                     (if (eq? (vector-ref str ptrStr) (integer->char 43))
                                       (block
                                         (vector-set! stack (- ptrStack 2) (+ (vector-ref stack (- ptrStack 2)) (vector-ref stack (- ptrStack 1))))
                                         (let ([ptrStack (- ptrStack 1)])
                                           (let ([ptrStr (+ ptrStr 1)])
                                             (list ptrStack ptrStr)))
                                         )
                                       (list ptrStack ptrStr)))))))
                                 (vector-ref stack 0)))])
                 (d ptrStack ptrStr)))))))
(define main (let ([len 0])
               ((lambda (j) 
                  (let ([len j])
                    (block (mread-blank) (let ([tab (array_init_withenv len 
                                           (lambda (i) 
                                             (lambda (_) (let ([tmp (integer->char 0)])
                                                           ((lambda (h) 
                                                              (let ([tmp h])
                                                                (let ([g tmp])
                                                                  (list '() g)))) (mread-char))))) '())])
                  (let ([result (npi_ tab len)])
                    (display result))) ))) (mread-int))))

