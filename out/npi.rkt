#lang racket
(require racket/block)
(define last-char 0)
(define next-char (lambda () (set! last-char (read-char (current-input-port)))))
(next-char)
(define mread-char (lambda ()
  (let ([ out last-char])
    (block
      (next-char)
      out
    ))))
(define mread-int (lambda ()
  (if (eq? #\- last-char)
  (block
    (next-char) (- 0 (mread-int)))
    (letrec ([w (lambda (out)
      (if (eof-object? last-char)
        out
        (if (and last-char (>= (char->integer last-char) (char->integer #\0)) (<= (char->integer last-char) (char->integer #\9)))
          (let ([out (+ (* 10 out) (- (char->integer last-char) (char->integer #\0)))])
            (block
              (next-char)
              (w out)
          ))
        out
      )))]) (w 0)))))
(define mread-blank (lambda ()
  (if (or (eq? last-char #\NewLine) (eq? last-char #\Space) ) (block (next-char) (mread-blank)) '())
))

(define (is_number c)
  (and (<= (char->integer c) (char->integer #\9)) (>= (char->integer c) (char->integer #\0)))
)

(define (npi0 str len)
  (let ([stack (build-vector len (lambda (i) 
                                   0))])
  (let ([ptrStack 0])
  (let ([ptrStr 0])
  (letrec ([a (lambda (ptrStack ptrStr) (if (< ptrStr len)
                                        (if (eq? (vector-ref str ptrStr) #\Space)
                                        (let ([ptrStr (+ ptrStr 1)])
                                        (a ptrStack ptrStr))
                                        (if (is_number (vector-ref str ptrStr))
                                        (let ([num 0])
                                        (letrec ([b (lambda (num ptrStr) (if (not (eq? (vector-ref str ptrStr) #\Space))
                                                                         (let ([num (- (+ (* num 10) (char->integer (vector-ref str ptrStr))) (char->integer #\0))])
                                                                         (let ([ptrStr (+ ptrStr 1)])
                                                                         (b num ptrStr)))
                                                                         (block
                                                                           (vector-set! stack ptrStack num)
                                                                           (let ([ptrStack (+ ptrStack 1)])
                                                                           (a ptrStack ptrStr))
                                                                           )))])
                                          (b num ptrStr)))
                                        (if (eq? (vector-ref str ptrStr) (integer->char 43))
                                        (block
                                          (vector-set! stack (- ptrStack 2) (+ (vector-ref stack (- ptrStack 2)) (vector-ref stack (- ptrStack 1))))
                                          (let ([ptrStack (- ptrStack 1)])
                                          (let ([ptrStr (+ ptrStr 1)])
                                          (a ptrStack ptrStr)))
                                          )
                                        (a ptrStack ptrStr))))
                                        (vector-ref stack 0)))])
    (a ptrStack ptrStr)))))
)

(define main
  (let ([len 0])
  ((lambda (d) 
     (let ([len d])
     (block
       (mread-blank)
       (let ([tab (build-vector len (lambda (i) 
                                      (let ([tmp (integer->char 0)])
                                      ((lambda (e) 
                                         e) (mread-char)))))])
     (let ([result (npi0 tab len)])
     (display result)))
     ))) (mread-int)))
)

