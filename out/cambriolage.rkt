#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))
(define last-char 0)
(define next-char (lambda () (set! last-char (read-char (current-input-port)))))
(next-char)
(define mread-int (lambda ()
  (if (eq? #\- last-char)
  (block
    (next-char) (- 0 (mread-int)))
    (letrec ([w (lambda (out)
      (if (eof-object? last-char)
        out
        (if (and last-char (>= (char->integer last-char) (char->integer #\0)) (<= (char->integer last-char) (char->integer #\9)))
          (let ([out (+ (* 10 out) (- (char->integer last-char) (char->integer #\0)))])
            (block
              (next-char)
              (w out)
          ))
        out
      )))]) (w 0)))))
(define mread-blank (lambda ()
  (if (or (eq? last-char #\NewLine) (eq? last-char #\Space) ) (block (next-char) (mread-blank)) '())
))

(define (max2 a b)
  ;toto
  (let ([r (lambda (_) 
             '())])
  (if (> a b)
  a
  b))
)
(define (nbPassePartout n passepartout m serrures)
  ;toto
  (let ([max_ancient 0])
  (let ([max_recent 0])
  (let ([p 0])
  (let ([q (- m 1)])
  (letrec ([o (lambda (i max_ancient max_recent) 
                (if (<= i q)
                (let ([max_ancient (if (and (eq? (vector-ref (vector-ref serrures i) 0) (- 1)) (> (vector-ref (vector-ref serrures i) 1) max_ancient))
                                   (let ([max_ancient (vector-ref (vector-ref serrures i) 1)])
                                   max_ancient)
                                   max_ancient)])
                (let ([max_recent (if (and (eq? (vector-ref (vector-ref serrures i) 0) 1) (> (vector-ref (vector-ref serrures i) 1) max_recent))
                                  (let ([max_recent (vector-ref (vector-ref serrures i) 1)])
                                  max_recent)
                                  max_recent)])
                (o (+ i 1) max_ancient max_recent)))
                (let ([max_ancient_pp 0])
                (let ([max_recent_pp 0])
                (let ([g 0])
                (let ([h (- n 1)])
                (letrec ([f (lambda (i max_ancient_pp max_recent_pp) 
                              (if (<= i h)
                              (let ([pp (vector-ref passepartout i)])
                              (if (and (>= (vector-ref pp 0) max_ancient) (>= (vector-ref pp 1) max_recent))
                              1
                              (let ([max_ancient_pp (max2 max_ancient_pp (vector-ref pp 0))])
                              (let ([max_recent_pp (max2 max_recent_pp (vector-ref pp 1))])
                              (f (+ i 1) max_ancient_pp max_recent_pp)))))
                              (let ([e (lambda (_) 
                                         '())])
                              (if (and (>= max_ancient_pp max_ancient) (>= max_recent_pp max_recent))
                              2
                              0))))])
                (f g max_ancient_pp max_recent_pp))))))))])
  (o p max_ancient max_recent))))))
)
(define main
  ((lambda (n) 
     (block (mread-blank) (let ([passepartout (array_init_withenv n (lambda (i) 
                                                                    (lambda (_) 
                                                                    (let ([c 2])
                                                                    (let ([out0 (array_init_withenv c 
                                                                    (lambda (j) 
                                                                    (lambda (_) (
                                                                    (lambda (out__) 
                                                                    (block (mread-blank) 
                                                                    (let ([u out__])
                                                                    (list '() u)) )) (mread-int)))) '())])
                                                                    (let ([s out0])
                                                                    (list '() s)))))) '())])
((lambda (m) 
   (block (mread-blank) (let ([serrures (array_init_withenv m (lambda (k) 
                                                                (lambda (_) 
                                                                (let ([d 2])
                                                                (let ([out1 (array_init_withenv d 
                                                                (lambda (l) 
                                                                  (lambda (_) (
                                                                  (lambda (out_) 
                                                                    (block (mread-blank) 
                                                                    (let ([w out_])
                                                                    (list '() w)) )) (mread-int)))) '())])
                                                                (let ([v out1])
                                                                (list '() v)))))) '())])
(display (nbPassePartout n passepartout m serrures))) )) (mread-int))) )) (mread-int))
)

