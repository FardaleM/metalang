#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))

(define (periode restes len a b)
  ;toto
  (letrec ([c (lambda (a len) 
                (if (not (eq? a 0))
                (let ([chiffre (quotient a b)])
                (let ([reste (remainder a b)])
                (let ([e 0])
                (let ([f (- len 1)])
                (letrec ([d (lambda (i) 
                              (if (<= i f)
                              (if (eq? (vector-ref restes i) reste)
                              (- len i)
                              (d (+ i 1)))
                              (block
                                (vector-set! restes len reste)
                                (let ([len (+ len 1)])
                                (let ([a (* reste 10)])
                                (c a len)))
                                )))])
                (d e))))))
                0))])
(c a len))
)
(define main
  (let ([t0 (array_init_withenv 1000 (lambda (j) 
                                       (lambda (_) (let ([g 0])
                                                   (list '() g)))) '())])
  (let ([m 0])
  (let ([mi 0])
  (let ([k 1])
  (let ([l 1000])
  (letrec ([h (lambda (i m mi) 
                (if (<= i l)
                (let ([p (periode t0 0 1 i)])
                ((lambda (internal_env) (apply (lambda (m mi) 
                                                      (h (+ i 1) m mi)) internal_env)) 
                (if (> p m)
                (let ([mi i])
                (let ([m p])
                (list m mi)))
                (list m mi))))
                (block
                  (map display (list mi "\n" m "\n"))
                  )))])
  (h k m mi)))))))
)

