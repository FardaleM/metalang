#lang racket
(require racket/block)

(define (is_pair i)
  ;toto
  (let ([j 1])
  (if (< i 10)
  (let ([j 2])
  (if (eq? i 0)
  (let ([j 4])
  #t)
  (let ([j 3])
  (if (eq? i 2)
  (let ([j 4])
  #t)
  (let ([j 5])
  (let ([j 6])
  (let ([j (if (< i 20)
           (let ([j (if (eq? i 22)
                    (let ([j 0])
                    j)
                    j)])
           (let ([j 8])
           j))
           j)])
  (eq? (remainder i 2) 0))))))))
  (let ([j 6])
  (let ([j (if (< i 20)
           (let ([j (if (eq? i 22)
                    (let ([j 0])
                    j)
                    j)])
           (let ([j 8])
           j))
           j)])
  (eq? (remainder i 2) 0)))))
)
(define main
  '()
)

