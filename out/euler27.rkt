#lang racket
(require racket/block)

(define (eratostene t0 max0)
  (let ([n 0])
  (letrec ([c (lambda (i n) (if (<= i (- max0 1))
                            (if (eq? (vector-ref t0 i) i)
                            (let ([n (+ n 1)])
                            (let ([j (* i i)])
                            (letrec ([d (lambda (j) (if (and (< j max0) (> j 0))
                                                    (block
                                                      (vector-set! t0 j 0)
                                                      (let ([j (+ j i)])
                                                      (d j))
                                                      )
                                                    (c (+ i 1) n)))])
                              (d j))))
                            (c (+ i 1) n))
                            n))])
    (c 2 n)))
)

(define (isPrime n primes len)
  (let ([i 0])
  (let ([n (if (< n 0)
           (- n)
           n)])
  (letrec ([e (lambda (i) (if (< (* (vector-ref primes i) (vector-ref primes i)) n)
                          (if (eq? (remainder n (vector-ref primes i)) 0)
                          #f
                          (let ([i (+ i 1)])
                          (e i)))
                          #t))])
    (e i))))
)

(define (test a b primes len)
  (letrec ([f (lambda (n) (if (<= n 200)
                          (let ([j (+ (* n n) (* a n) b)])
                          (if (not (isPrime j primes len))
                          n
                          (f (+ n 1))))
                          200))])
    (f 0))
)

(define main
  (let ([maximumprimes 1000])
  (let ([era (build-vector maximumprimes (lambda (j) 
                                           j))])
  (let ([result 0])
  (let ([max0 0])
  (let ([nprimes (eratostene era maximumprimes)])
  (let ([primes (build-vector nprimes (lambda (o) 
                                        0))])
  (let ([l 0])
  (letrec ([g (lambda (k l) (if (<= k (- maximumprimes 1))
                            (if (eq? (vector-ref era k) k)
                            (block
                              (vector-set! primes l k)
                              (let ([l (+ l 1)])
                              (g (+ k 1) l))
                              )
                            (g (+ k 1) l))
                            (block
                              (printf "~a == ~a\n" l nprimes)
                              (let ([ma 0])
                              (let ([mb 0])
                              (letrec ([h (lambda (b ma max0 mb result) (if (<= b 999)
                                                                        (if (eq? (vector-ref era b) b)
                                                                        (letrec ([m (lambda (a ma max0 mb result) 
                                                                          (if (<= a 999)
                                                                          (let ([n1 (test a b primes nprimes)])
                                                                          (let ([n2 (test a (- b) primes nprimes)])
                                                                          ((lambda (internal_env) (apply (lambda
                                                                           (ma max0 mb result) 
                                                                          (if (> n2 max0)
                                                                          (let ([max0 n2])
                                                                          (let ([result (* (- a) b)])
                                                                          (let ([ma a])
                                                                          (let ([mb (- b)])
                                                                          (m (+ a 1) ma max0 mb result)))))
                                                                          (m (+ a 1) ma max0 mb result))) internal_env)) 
                                                                          (if (> n1 max0)
                                                                          (let ([max0 n1])
                                                                          (let ([result (* a b)])
                                                                          (let ([ma a])
                                                                          (let ([mb b])
                                                                          (list ma max0 mb result)))))
                                                                          (list ma max0 mb result)))))
                                                                          (h (+ b 1) ma max0 mb result)))])
                                                                          (m (- 999) ma max0 mb result))
                                                                        (h (+ b 1) ma max0 mb result))
                                                                        (printf "~a ~a\n~a\n~a\n" ma mb max0 result)))])
                                (h 3 ma max0 mb result))))
                              )))])
    (g 2 l)))))))))
)

