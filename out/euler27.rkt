#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))

(define (eratostene t_ max_)
  ;toto
  (let ([n 0])
  (let ([q 2])
  (let ([r (- max_ 1)])
  (letrec ([h (lambda (i n) 
                (if (<= i r)
                (let ([n (if (eq? (vector-ref t_ i) i)
                         (let ([n (+ n 1)])
                         (let ([j (* i i)])
                         (letrec ([p (lambda (j) 
                                       (if (and (< j max_) (> j 0))
                                       (block
                                         (vector-set! t_ j 0)
                                         (let ([j (+ j i)])
                                         (p j))
                                         )
                                       n))])
                         (p j))))
                n)])
                (h (+ i 1) n))
                n))])
  (h q n)))))
)
(define (isPrime n primes len)
  ;toto
  (let ([i 0])
  (let ([n (if (< n 0)
           (let ([n (- n)])
           n)
           n)])
  (letrec ([g (lambda (i) 
                (if (< (* (vector-ref primes i) (vector-ref primes i)) n)
                (if (eq? (remainder n (vector-ref primes i)) 0)
                #f
                (let ([i (+ i 1)])
                (g i)))
                #t))])
  (g i))))
)
(define (test a b primes len)
  ;toto
  (let ([d 0])
  (let ([e 200])
  (letrec ([c (lambda (n) 
                (if (<= n e)
                (let ([j (+ (+ (* n n) (* a n)) b)])
                (if (not (isPrime j primes len))
                n
                (c (+ n 1))))
                200))])
  (c d))))
)
(define main
  (let ([maximumprimes 1000])
  (let ([era (array_init_withenv maximumprimes (lambda (j) 
                                                 (lambda (_) (let ([s j])
                                                             (list '() s)))) '())])
  (let ([result 0])
  (let ([max_ 0])
  (let ([nprimes (eratostene era maximumprimes)])
  (let ([primes (array_init_withenv nprimes (lambda (o) 
                                              (lambda (_) (let ([u 0])
                                                          (list '() u)))) '())])
  (let ([l 0])
  (let ([bc 2])
  (let ([bd (- maximumprimes 1)])
  (letrec ([bb (lambda (k l) 
                 (if (<= k bd)
                 (let ([l (if (eq? (vector-ref era k) k)
                          (block
                            (vector-set! primes l k)
                            (let ([l (+ l 1)])
                            l)
                            )
                          l)])
                 (bb (+ k 1) l))
                 (block
                   (display l)
                   (display " == ")
                   (display nprimes)
                   (display "\n")
                   (let ([ma 0])
                   (let ([mb 0])
                   (let ([z 3])
                   (let ([ba 999])
                   (letrec ([v (lambda (b ma max_ mb result) 
                                 (if (<= b ba)
                                 ((lambda (internal_env) (apply (lambda
                                  (ma max_ mb result) 
                                 (v (+ b 1) ma max_ mb result)) internal_env)) 
                                 (if (eq? (vector-ref era b) b)
                                 (let ([x (- 999)])
                                 (let ([y 999])
                                 (letrec ([w (lambda (a ma max_ mb result) 
                                               (if (<= a y)
                                               (let ([n1 (test a b primes nprimes)])
                                               (let ([n2 (test a (- b) primes nprimes)])
                                               ((lambda (internal_env) (apply (lambda
                                                (ma max_ mb result) 
                                               ((lambda (internal_env) (apply (lambda
                                                (ma max_ mb result) 
                                               (w (+ a 1) ma max_ mb result)) internal_env)) 
                                               (if (> n2 max_)
                                               (let ([max_ n2])
                                               (let ([result (* (- a) b)])
                                               (let ([ma a])
                                               (let ([mb (- b)])
                                               (list ma max_ mb result)))))
                                               (list ma max_ mb result)))) internal_env)) 
                                               (if (> n1 max_)
                                               (let ([max_ n1])
                                               (let ([result (* a b)])
                                               (let ([ma a])
                                               (let ([mb b])
                                               (list ma max_ mb result)))))
                                               (list ma max_ mb result)))))
                                               (list ma max_ mb result)))])
                                 (w x ma max_ mb result))))
                                 (list ma max_ mb result)))
                                 (block
                                   (display ma)
                                   (display " ")
                                   (display mb)
                                   (display "\n")
                                   (display max_)
                                   (display "\n")
                                   (display result)
                                   (display "\n")
                                   )))])
                   (v z ma max_ mb result))))))
                 )))])
  (bb bc l)))))))))))
)

