#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (let ((tab (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    ))))) (list env tab))))

(define (eratostene t0 max0)
  ;toto
  (let ([n 0])
  (let ([m 2])
  (let ([p (- max0 1)])
  (letrec ([g (lambda (i n) 
                (if (<= i p)
                (let ([n (if (eq? (vector-ref t0 i) i)
                         (let ([n (+ n 1)])
                         (let ([j (* i i)])
                         (letrec ([h (lambda (j) 
                                       (if (and (< j max0) (> j 0))
                                       (block
                                         (vector-set! t0 j 0)
                                         (let ([j (+ j i)])
                                         (h j))
                                         )
                                       n))])
                         (h j))))
                n)])
                (g (+ i 1) n))
                n))])
  (g m n)))))
)
(define (isPrime n primes len)
  ;toto
  (let ([i 0])
  (let ([n (if (< n 0)
           (let ([n (- n)])
           n)
           n)])
  (letrec ([f (lambda (i) 
                (if (< (* (vector-ref primes i) (vector-ref primes i)) n)
                (if (eq? (remainder n (vector-ref primes i)) 0)
                #f
                (let ([i (+ i 1)])
                (f i)))
                #t))])
  (f i))))
)
(define (test a b primes len)
  ;toto
  (let ([d 0])
  (let ([e 200])
  (letrec ([c (lambda (n) 
                (if (<= n e)
                (let ([j (+ (+ (* n n) (* a n)) b)])
                (if (not (isPrime j primes len))
                n
                (c (+ n 1))))
                200))])
  (c d))))
)
(define main
  (let ([maximumprimes 1000])
  ((lambda (internal_env) (apply (lambda (r era) 
                                        (block
                                          r
                                          (let ([result 0])
                                          (let ([max0 0])
                                          (let ([nprimes (eratostene era maximumprimes)])
                                          ((lambda (internal_env) (apply (lambda (u primes) 
                                                                                (block
                                                                                u
                                                                                (let ([l 0])
                                                                                (let ([bc 2])
                                                                                (let ([bd (- maximumprimes 1)])
                                                                                (letrec ([bb 
                                                                                (lambda (k l) 
                                                                                (if (<= k bd)
                                                                                (let ([l 
                                                                                (if (eq? (vector-ref era k) k)
                                                                                (block
                                                                                (vector-set! primes l k)
                                                                                (let ([l (+ l 1)])
                                                                                l)
                                                                                )
                                                                                l)])
                                                                                (bb (+ k 1) l))
                                                                                (block
                                                                                (map display (list l " == " nprimes "\n"))
                                                                                (let ([ma 0])
                                                                                (let ([mb 0])
                                                                                (let ([z 3])
                                                                                (let ([ba 999])
                                                                                (letrec ([v 
                                                                                (lambda (b ma max0 mb result) 
                                                                                (if (<= b ba)
                                                                                ((lambda (internal_env) (apply (lambda
                                                                                 (ma max0 mb result) 
                                                                                (v (+ b 1) ma max0 mb result)) internal_env)) 
                                                                                (if (eq? (vector-ref era b) b)
                                                                                (let ([x (- 999)])
                                                                                (let ([y 999])
                                                                                (letrec ([w 
                                                                                (lambda (a ma max0 mb result) 
                                                                                (if (<= a y)
                                                                                (let ([n1 (test a b primes nprimes)])
                                                                                (let ([n2 (test a (- b) primes nprimes)])
                                                                                ((lambda (internal_env) (apply (lambda
                                                                                 (ma max0 mb result) 
                                                                                ((lambda (internal_env) (apply (lambda
                                                                                 (ma max0 mb result) 
                                                                                (w (+ a 1) ma max0 mb result)) internal_env)) 
                                                                                (if (> n2 max0)
                                                                                (let ([max0 n2])
                                                                                (let ([result (* (- a) b)])
                                                                                (let ([ma a])
                                                                                (let ([mb (- b)])
                                                                                (list ma max0 mb result)))))
                                                                                (list ma max0 mb result)))) internal_env)) 
                                                                                (if (> n1 max0)
                                                                                (let ([max0 n1])
                                                                                (let ([result (* a b)])
                                                                                (let ([ma a])
                                                                                (let ([mb b])
                                                                                (list ma max0 mb result)))))
                                                                                (list ma max0 mb result)))))
                                                                                (list ma max0 mb result)))])
                                                                                (w x ma max0 mb result))))
                                                                                (list ma max0 mb result)))
                                                                                (block
                                                                                (map display (list ma " " mb "\n" max0 "\n" result "\n"))
                                                                                )))])
                                                                                (v z ma max0 mb result))))))
                                                                                )))])
                                                                                (bb bc l)))))
                                          )) internal_env)) (array_init_withenv nprimes 
                                          (lambda (o) 
                                            (lambda (_) (let ([s 0])
                                                        (list '() s)))) '())))))
)) internal_env)) (array_init_withenv maximumprimes (lambda (j) 
                                                      (lambda (_) (let ([q j])
                                                                  (list '() q)))) '())))
)

