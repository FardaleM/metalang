/*
We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once;
for example, the 5-digit number, 15234, is 1 through 5 pandigital.

The product 7254 is unusual, as the identity, 39 Ã— 186 = 7254, containing multiplicand, multiplier,
and product is 1 through 9 pandigital.

Find the sum of all products whose multiplicand/multiplier/product identity can be written as a
1 through 9 pandigital.

HINT: Some products can be obtained in more than one way so be sure to only include it once in your sum.


(a * 10 + b) ( c * 100 + d * 10 + e) =
  a * c * 1000 +
  a * d * 100 +
  a * e * 10 +
  b * c * 100 +
  b * d * 10 +
  b * e
  => b != e != b * e % 10 ET
  a != d != (b * e / 10 + b * d + a * e ) % 10
*/
def bool okdigits(array<bool> ok, int n)
  if n == 0
  then
    return true
  else
    def int digit = n % 10
    if ok[digit]
    then
      ok[digit] = false
      def bool o = okdigits(ok, n / 10)
      ok[digit] = true
      return o
    else
      return false
    end
  end
end

main
  def int count = 0
  def array<bool> allowed[10] with i do
                                       return i != 0
  end
  def array<bool> counted[100000] with j do
                                           return false
  end
  for e = 1 to  9
  do
    allowed[e] = false
    for b = 1 to  9
    do
      if allowed[b]
      then
        allowed[b] = false
        def int be = b * e % 10
        if allowed[be]
        then
          allowed[be] = false
          for a = 1 to  9
          do
            if allowed[a]
            then
              allowed[a] = false
              for c = 1 to  9
              do
                if allowed[c]
                then
                  allowed[c] = false
                  for d = 1 to  9
                  do
                    if allowed[d]
                    then
                      allowed[d] = false
                      //  2 * 3 digits 
                      def int product = (a * 10 + b) * (c * 100 + d * 10 + e)
                      if !counted[product] && okdigits(allowed, product / 10)
                      then
                        counted[product] = true
                        count = count + product
                        print int product
                        print string " "
                      end
                      //  1  * 4 digits 
                      def int product2 = b * (a * 1000 + c * 100 + d * 10 + e)
                      if !counted[product2] && okdigits(allowed, product2 / 10)
                      then
                        counted[product2] = true
                        count = count + product2
                        print int product2
                        print string " "
                      end
                      allowed[d] = true
                    end
                  end
                  allowed[c] = true
                end
              end
              allowed[a] = true
            end
          end
          allowed[be] = true
        end
        allowed[b] = true
      end
    end
    allowed[e] = true
  end
  print int count
  print string "\n"
end

