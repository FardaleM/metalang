let eratostene (t:int array) max0 =
  let n = ref( 0 )
  for i = 2 to max0 - 1 do
    if t.[i] = i then
      n := (!n) + 1
      let j = ref( i * i )
      while (!j) < max0 && (!j) > 0 do
        t.[(!j)] <- 0
        j := (!j) + i
  (!n)

exception Found_1 of bool

let isPrime n (primes:int array) _len : bool =
  let n = ref n
  try
  let i = ref( 0 )
  if (!n) < 0 then
    n := (- (!n))
  while primes.[(!i)] * primes.[(!i)] < (!n) do
    if (!n) % primes.[(!i)] = 0 then
      raise (Found_1(false))
    i := (!i) + 1
  true
  with Found_1 (out) -> out

exception Found_2 of int

let test a b (primes:int array) len =
  try
  for n = 0 to 200 do
    let j = n * n + a * n + b
    if (not (isPrime j primes len)) then
      raise (Found_2(n))
  200
  with Found_2 (out) -> out

let () =
  let maximumprimes = 1000
  let era = Array.init maximumprimes (fun j ->
    j)
  let result = ref( 0 )
  let max0 = ref( 0 )
  let nprimes = eratostene era maximumprimes
  let primes = Array.init nprimes (fun o ->
    0)
  let l = ref( 0 )
  for k = 2 to maximumprimes - 1 do
    if era.[k] = k then
      primes.[(!l)] <- k
      l := (!l) + 1
  Printf.printf "%d == %d\n" (!l) nprimes
  let ma = ref( 0 )
  let mb = ref( 0 )
  for b = 3 to 999 do
    if era.[b] = b then
      for a = (- 999) to 999 do
        let n1 = test a b primes nprimes
        let n2 = test a (- b) primes nprimes
        if n1 > (!max0) then
          max0 := n1
          result := a * b
          ma := a
          mb := b
        if n2 > (!max0) then
          max0 := n2
          result := (- a) * b
          ma := a
          mb := (- b)
  Printf.printf "%d %d\n%d\n%d\n" (!ma) (!mb) (!max0) (!result)
 