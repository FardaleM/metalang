open System
let min2_ a b =
  if a < b then
    a
  else
    b

let rec pathfind_aux (cache:int array array) (tab:char array array) x y posX posY =
  if posX = x - 1 && posY = y - 1 then
    0
  else
    if posX < 0 || posY < 0 || posX >= x || posY >= y then
      x * y * 10
    else
      if tab.[posY].[posX] = '#' then
        x * y * 10
      else
        if cache.[posY].[posX] <> (- 1) then
          cache.[posY].[posX]
        else
          cache.[posY].[posX] <- x * y * 10
          let val1 = pathfind_aux cache tab x y (posX + 1) posY
          let val2 = pathfind_aux cache tab x y (posX - 1) posY
          let val3 = pathfind_aux cache tab x y posX (posY - 1)
          let val4 = pathfind_aux cache tab x y posX (posY + 1)
          let out0 = 1 + min2_ (min2_ (min2_ val1 val2) val3) val4
          cache.[posY].[posX] <- out0
          out0

let pathfind (tab:char array array) x y =
  let cache = Array.init y (fun i ->
    let tmp = Array.init x (fun j ->
      Printf.printf "%c" tab.[i].[j]
      (- 1))
    Printf.printf "\n"
    tmp)
  pathfind_aux cache tab x y 0 0

let () =
  let x = (Console.ReadLine () |> Int32.Parse)
  let y = (Console.ReadLine () |> Int32.Parse)
  Printf.printf "%d %d\n" x y
  let e = Array.init y (fun _f ->
    ((Console.ReadLine ()).ToCharArray ()))
  let tab = e
  let result = pathfind tab x y
  Printf.printf "%d" result
 