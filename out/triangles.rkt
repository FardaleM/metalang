#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))
(define last-char 0)
(define next-char (lambda () (set! last-char (read-char (current-input-port)))))
(next-char)
(define mread-int (lambda ()
  (if (eq? #\- last-char)
  (block
    (next-char) (- 0 (mread-int)))
    (letrec ([w (lambda (out)
      (if (eof-object? last-char)
        out
        (if (and last-char (>= (char->integer last-char) (char->integer #\0)) (<= (char->integer last-char) (char->integer #\9)))
          (let ([out (+ (* 10 out) (- (char->integer last-char) (char->integer #\0)))])
            (block
              (next-char)
              (w out)
          ))
        out
      )))]) (w 0)))))
(define mread-blank (lambda ()
  (if (or (eq? last-char #\NewLine) (eq? last-char #\Space) ) (block (next-char) (mread-blank)) '())
))

(define find0 (lambda (len tab cache x y) 
                ;
                ;	Cette fonction est rÃ©cursive
                ;	
                (let ([e (lambda (_) 
                           (let ([result 0])
                             (let ([out0 (find0 len tab cache x (+ y 1))])
                               (let ([out1 (find0 len tab cache (+ x 1) (+ y 1))])
                                 (let ([result (if (> out0 out1)
                                                 (let ([result (+ out0 (vector-ref (vector-ref tab y) x))])
                                                   result)
                                                 (let ([result (+ out1 (vector-ref (vector-ref tab y) x))])
                                                   result))])
                                   (block
                                     (vector-set! (vector-ref cache y) x result)
                                     result
                                     ))))))])
                (if (eq? y (- len 1))
                  (vector-ref (vector-ref tab y) x)
                  (let ([f (lambda (_) 
                             (e 'nil))])
                  (if (> x y)
                    (- 10000)
                    (if (not (eq? (vector-ref (vector-ref cache y) x) 0))
                      (vector-ref (vector-ref cache y) x)
                      (f 'nil))))))))
(define find_ (lambda (len tab) 
                (let ([tab2 (array_init_withenv len (lambda (i) 
                                                      (lambda (_) (let ([a (+ i 1)])
                                                                    (let ([tab3 (array_init_withenv a 
                                                                    (lambda (j) 
                                                                    (lambda (_) 
                                                                    (let ([d 0])
                                                                    (list '() d)))) '())])
                                                                    (let ([c tab3])
                                                                    (list '() c)))))) '())])
  (find0 len tab tab2 0 0))))
(define main (let ([len 0])
               ((lambda (u) 
                  (let ([len u])
                    (block (mread-blank) (let ([tab (array_init_withenv len 
                                           (lambda (i) 
                                             (lambda (_) (let ([b (+ i 1)])
                                                           (let ([tab2 (array_init_withenv b 
                                                             (lambda (j) 
                                                               (lambda (_) 
                                                               (let ([tmp 0])
                                                                 ((lambda (m) 
                                                                    (let ([tmp m])
                                                                    (block (mread-blank) 
                                                                    (let ([h tmp])
                                                                    (list '() h)) ))) (mread-int))))) '())])
                                             (let ([g tab2])
                                               (list '() g)))))) '())])
               (block
                 (display (find_ len tab))
                 (display "\n")
                 (let ([r 0])
                   (let ([s (- len 1)])
                     (letrec ([n (lambda (k) 
                                   (if (<= k s)
                                     (let ([p 0])
                                       (let ([q k])
                                         (letrec ([o (lambda (l) 
                                                       (if (<= l q)
                                                         (block
                                                           (display (vector-ref (vector-ref tab k) l))
                                                           (display " ")
                                                           (o (+ l 1))
                                                           )
                                                         (block
                                                           (display "\n")
                                                           (n (+ k 1))
                                                           )))])
                                         (o p))))
                                   '()))])
                   (n r))))
  )) ))) (mread-int))))

