#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))
(define last-char 0)
(define next-char (lambda () (set! last-char (read-char (current-input-port)))))
(next-char)
(define mread-int (lambda ()
  (if (eq? #\- last-char)
  (block
    (next-char) (- 0 (mread-int)))
    (letrec ([w (lambda (out)
      (if (eof-object? last-char)
        out
        (if (and last-char (>= (char->integer last-char) (char->integer #\0)) (<= (char->integer last-char) (char->integer #\9)))
          (let ([out (+ (* 10 out) (- (char->integer last-char) (char->integer #\0)))])
            (block
              (next-char)
              (w out)
          ))
        out
      )))]) (w 0)))))
(define mread-blank (lambda ()
  (if (or (eq? last-char #\NewLine) (eq? last-char #\Space) ) (block (next-char) (mread-blank)) '())
))

(define (find0 len tab cache x y)
  ;toto
  ;
  ;	Cette fonction est rÃ©cursive
  ;	
  (let ([c (lambda (_) 
             (let ([result 0])
             (let ([out0 (find0 len tab cache x (+ y 1))])
             (let ([out1 (find0 len tab cache (+ x 1) (+ y 1))])
             (let ([result (if (> out0 out1)
                           (let ([result (+ out0 (vector-ref (vector-ref tab y) x))])
                           result)
                           (let ([result (+ out1 (vector-ref (vector-ref tab y) x))])
                           result))])
             (block
               (vector-set! (vector-ref cache y) x result)
               result
               ))))))])
  (if (eq? y (- len 1))
  (vector-ref (vector-ref tab y) x)
  (let ([d (lambda (_) 
             (c 'nil))])
  (if (> x y)
  (- 10000)
  (if (not (eq? (vector-ref (vector-ref cache y) x) 0))
  (vector-ref (vector-ref cache y) x)
  (d 'nil))))))
)
(define (find01 len tab)
  ;toto
  (let ([tab2 (array_init_withenv len (lambda (i) 
                                        (lambda (_) (let ([tab3 (array_init_withenv (+ i 1) 
                                                    (lambda (j) 
                                                      (lambda (_) (let ([b 0])
                                                                  (list '() b)))) '())])
                                        (let ([a tab3])
                                        (list '() a))))) '())])
(find0 len tab tab2 0 0))
)
(define main
  (let ([len 0])
  ((lambda (r) 
     (let ([len r])
     (block
       (mread-blank)
       (let ([tab (array_init_withenv len (lambda (i) 
                                            (lambda (_) (let ([tab2 (array_init_withenv (+ i 1) 
                                                        (lambda (j) 
                                                          (lambda (_) 
                                                          (let ([tmp 0])
                                                          ((lambda (g) 
                                                             (let ([tmp g])
                                                             (block
                                                               (mread-blank)
                                                               (let ([f tmp])
                                                               (list '() f))
                                                               ))) (mread-int))))) '())])
       (let ([e tab2])
       (list '() e))))) '())])
     (block
       (map display (list (find01 len tab) "\n"))
       (let ([p 0])
       (let ([q (- len 1)])
       (letrec ([h (lambda (k) 
                     (if (<= k q)
                     (let ([n 0])
                     (let ([o k])
                     (letrec ([m (lambda (l) 
                                   (if (<= l o)
                                   (block
                                     (map display (list (vector-ref (vector-ref tab k) l) " "))
                                     (m (+ l 1))
                                     )
                                   (block
                                     (display "\n")
                                     (h (+ k 1))
                                     )))])
                     (m n))))
                     '()))])
       (h p))))
  ))
))) (mread-int)))
)

