#lang racket
(require racket/block)

(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))
(define last-char 0)
(define next-char (lambda () (set! last-char (read-char (current-input-port)))))
(next-char)
(define mread-char (lambda ()
  (let ([ out last-char])
    (block
      (next-char)
      out
    ))))

(define mread-int (lambda ()
  (if (eq? #\- last-char)
  (block
    (next-char) (- 0 (mread-int)))
    (letrec ([w (lambda (out)
      (if (eof-object? last-char)
        out
        (if (and last-char (>= (char->integer last-char) (char->integer #\0)) (<= (char->integer last-char) (char->integer #\9)))
          (let ([out (+ (* 10 out) (- (char->integer last-char) (char->integer #\0)))])
            (block
              (next-char)
              (w out)
          ))
        out
      )))]) (w 0)))))

(define mread-blank (lambda ()
  (if (or (eq? last-char #\NewLine) (eq? last-char #\Space) ) (block (next-char) (mread-blank)) '())
))

(define go_ (lambda (tab a b) 
              (let ([m (quotient (+ a b) 2)])
                (let ([h (lambda (m tab a b) 
                           (let ([i a])
                             (let ([j b])
                               (letrec ([f (lambda (j i m tab a b) 
                                             (if (< i j)
                                               (let ([e (vector-ref tab i)])
                                                 (let ([g (lambda (e j i m tab a b) 
                                                            (f j i m tab a b))])
                                                 (if (< e m)
                                                   (let ([i (+ i 1)])
                                                     (g e j i m tab a b))
                                                   (let ([j (- j 1)])
                                                     (block (vector-set! tab i (vector-ref tab j)) (block (vector-set! tab j e) (g e j i m tab a b)))))))
                                             (let ([c (lambda (j i m tab a b) 
                                                        '())])
                                             (if (< i m)
                                               (go_ tab a m)
                                               (go_ tab m b)))))])
                           (f j i m tab a b)))))])
(if (eq? a m)
  (let ([k (lambda (m tab a b) 
             (h m tab a b))])
  (if (eq? (vector-ref tab a) m)
    b
    a))
(h m tab a b))))))
(define plus_petit_ (lambda (tab len) 
                      (go_ tab 0 len)))
(define main (let ([len 0])
               ((lambda (o) 
                  (let ([len o])
                    (block (mread-blank) (let ([tab (array_init_withenv len 
                                           (lambda (i) 
                                             (lambda (len) 
                                               (let ([tmp 0])
                                                 ((lambda (n) 
                                                    (let ([tmp n])
                                                      (block (mread-blank) 
                                                      (let ([l tmp])
                                                        (list len l)) ))) (mread-int))))) len)])
               (display (plus_petit_ tab len))) ))) (mread-int))))

