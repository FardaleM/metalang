#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))

(define main
  (let ([len (string->number (read-line))])
  (block
    (map display (list len "=len\n"))
    (let ([tab1 (list->vector (map string->number (regexp-split " " (read-line))))])
    (let ([l 0])
    (let ([m (- len 1)])
    (letrec ([k (lambda (i) 
                  (if (<= i m)
                  (block
                    (map display (list i "=>" (vector-ref tab1 i) "\n"))
                    (k (+ i 1))
                    )
                  (let ([len (string->number (read-line))])
                  (let ([tab2 (array_init_withenv (- len 1) (lambda (a) 
                                                              (lambda (_) 
                                                              (let ([b (list->vector (map string->number (regexp-split " " (read-line))))])
                                                              (list '() b)))) '())])
                  (let ([g 0])
                  (let ([h (- len 2)])
                  (letrec ([c (lambda (i) 
                                (if (<= i h)
                                (let ([e 0])
                                (let ([f (- len 1)])
                                (letrec ([d (lambda (j) 
                                              (if (<= j f)
                                              (block
                                                (map display (list (vector-ref (vector-ref tab2 i) j) " "))
                                                (d (+ j 1))
                                                )
                                              (block
                                                (display "\n")
                                                (c (+ i 1))
                                                )))])
                                (d e))))
                                '()))])
                  (c g))))))))])
    (k l)))))
))
)

