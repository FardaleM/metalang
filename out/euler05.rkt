#lang racket
(require racket/block)

(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))
(define last-char 0)
(define next-char (lambda () (set! last-char (read-char (current-input-port)))))
(next-char)
(define mread-char (lambda ()
  (let ([ out last-char])
    (block
      (next-char)
      out
    ))))

(define mread-int (lambda ()
  (if (eq? #\- last-char)
  (block
    (next-char) (- 0 (mread-int)))
    (letrec ([w (lambda (out)
      (if (eof-object? last-char)
        out
        (if (and last-char (>= (char->integer last-char) (char->integer #\0)) (<= (char->integer last-char) (char->integer #\9)))
          (let ([out (+ (* 10 out) (- (char->integer last-char) (char->integer #\0)))])
            (block
              (next-char)
              (w out)
          ))
        out
      )))]) (w 0)))))

(define mread-blank (lambda ()
  (if (or (eq? last-char #\NewLine) (eq? last-char #\Space) ) (block (next-char) (mread-blank)) '())
))

(define max2 (lambda (a b) 
               (let ([q (lambda (a b) 
                          '())])
               (if (> a b)
                 a
                 b))))
(define primesfactors (lambda (n) 
                        (let ([c (+ n 1)])
                          (let ([tab (array_init_withenv c (lambda (i) 
                                                             (lambda (internal_env) (apply (lambda
                                                              (c n) 
                                                             (let ([f 0])
                                                               (list (list c n) f))) internal_env))) (list c n))])
                          (let ([d 2])
                            (letrec ([h (lambda (d c n) 
                                          (if (and (not (eq? n 1)) (<= (* d d) n))
                                            (let ([p (lambda (d c n) 
                                                       (h d c n))])
                                            (if (eq? (remainder n d) 0)
                                              (block (vector-set! tab d (+ (vector-ref tab d) 1)) 
                                              (let ([n (quotient n d)])
                                                (p d c n)))
                                              (let ([d (+ d 1)])
                                                (p d c n))))
                                          (block (vector-set! tab n (+ (vector-ref tab n) 1)) tab)))])
                          (h d c n)))))))
(define main (let ([lim 20])
               (let ([e (+ lim 1)])
                 (let ([o (array_init_withenv e (lambda (m) 
                                                  (lambda (internal_env) (apply (lambda
                                                   (e lim) 
                                                  (let ([r 0])
                                                    (list (list e lim) r))) internal_env))) (list e lim))])
                 (let ([bd 1])
                   (let ([be lim])
                     (letrec ([z (lambda (i e lim) 
                                   (if (<= i be)
                                     (let ([t_ (primesfactors i)])
                                       (let ([bb 1])
                                         (let ([bc i])
                                           (letrec ([ba (lambda (j t_ e lim) 
                                                          (if (<= j bc)
                                                            (block (vector-set! o j (max2 (vector-ref o j) (vector-ref t_ j))) (ba (+ j 1) t_ e lim))
                                                            (z (+ i 1) e lim)))])
                                           (ba bb t_ e lim)))))
                                   (let ([product 1])
                                     (let ([x 1])
                                       (let ([y lim])
                                         (letrec ([s (lambda (k product e lim) 
                                                       (if (<= k y)
                                                         (let ([v 1])
                                                           (let ([w (vector-ref o k)])
                                                             (letrec ([u 
                                                               (lambda (l product e lim) 
                                                                 (if (<= l w)
                                                                   (let ([product (* product k)])
                                                                    (u (+ l 1) product e lim))
                                                                   (s (+ k 1) product e lim)))])
                                                             (u v product e lim))))
                                                       (block
                                                         (display product)
                                                         (display "\n")
                                                         )))])
                                       (s x product e lim)))))))])
               (z bd e lim))))))))

