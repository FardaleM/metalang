#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))

(define max2 (lambda (a b) 
               (let ([p (lambda (_) 
                          '())])
               (if (> a b)
                 a
                 b))))
(define primesfactors (lambda (n) 
                        (let ([c (+ n 1)])
                          (let ([tab (array_init_withenv c (lambda (i) 
                                                             (lambda (_) 
                                                             (let ([f 0])
                                                               (list '() f)))) '())])
                          (let ([d 2])
                            (letrec ([h (lambda (d n) 
                                          (if (and (not (eq? n 1)) (<= (* d d) n))
                                            ((lambda (internal_env) (apply (lambda
                                             (d n) 
                                            (h d n)) internal_env)) (if (eq? (remainder n d) 0)
                                                                    (block
                                                                    (vector-set! tab d (+ (vector-ref tab d) 1))
                                                                    (let ([n (quotient n d)])
                                                                    (list d n))
                                                                    )
                                                                    (let ([d (+ d 1)])
                                                                    (list d n))))
                                            (block
                                              (vector-set! tab n (+ (vector-ref tab n) 1))
                                              tab
                                              )))])
                            (h d n)))))))
(define main (let ([lim 20])
               (let ([e (+ lim 1)])
                 (let ([o (array_init_withenv e (lambda (m) 
                                                  (lambda (_) (let ([q 0])
                                                                (list '() q)))) '())])
                 (let ([bc 1])
                   (let ([bd lim])
                     (letrec ([y (lambda (i) 
                                   (if (<= i bd)
                                     (let ([t_ (primesfactors i)])
                                       (let ([ba 1])
                                         (let ([bb i])
                                           (letrec ([z (lambda (j) 
                                                         (if (<= j bb)
                                                           (block
                                                             (vector-set! o j (max2 (vector-ref o j) (vector-ref t_ j)))
                                                             (z (+ j 1))
                                                             )
                                                           (y (+ i 1))))])
                                           (z ba)))))
                                   (let ([product 1])
                                     (let ([w 1])
                                       (let ([x lim])
                                         (letrec ([r (lambda (k product) 
                                                       (if (<= k x)
                                                         (let ([u 1])
                                                           (let ([v (vector-ref o k)])
                                                             (letrec ([s 
                                                               (lambda (l product) 
                                                                 (if (<= l v)
                                                                   (let ([product (* product k)])
                                                                    (s (+ l 1) product))
                                                                   (r (+ k 1) product)))])
                                                             (s u product))))
                                                       (block
                                                         (display product)
                                                         (display "\n")
                                                         )))])
                                       (r w product)))))))])
               (y bc))))))))

