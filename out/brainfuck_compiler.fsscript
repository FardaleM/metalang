(*
Ce test permet de tester les macros
C'est un compilateur brainfuck qui lit sur l'entrÃ©e standard pendant la compilation
et qui produit les macros metalang correspondante
*)
let () =
  let _input = ' '
  let current_pos = ref( 500 )
  let mem = Array.init 1000 (fun _i ->
    0)
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  current_pos := (!current_pos) + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
  while mem.[(!current_pos)] <> 0 do
    mem.[(!current_pos)] <- mem.[(!current_pos)] - 1
    current_pos := (!current_pos) - 1
    mem.[(!current_pos)] <- mem.[(!current_pos)] + 1
    Printf.printf "%c" (char (mem.[(!current_pos)]))
    current_pos := (!current_pos) + 1
 