#lang racket
(require racket/block)

(define (exp0 a e)
  (let ([o 1])
  (letrec ([b (lambda (i o) (if (<= i e)
                            (let ([o (* o a)])
                            (b (+ i 1) o))
                            o))])
    (b 1 o)))
)

(define (e t0 n)
  (letrec ([c (lambda (i n) (if (<= i 8)
                            (if (>= n (* (vector-ref t0 i) i))
                            (let ([n (- n (* (vector-ref t0 i) i))])
                            (c (+ i 1) n))
                            (let ([nombre (+ (exp0 10 (- i 1)) (quotient n i))])
                            (let ([chiffre (- (- i 1) (remainder n i))])
                            (remainder (quotient nombre (exp0 10 chiffre)) 10))))
                            (- 1)))])
    (c 1 n))
)

(define main
  (let ([t0 (build-vector 9 (lambda (i) 
                              (- (exp0 10 i) (exp0 10 (- i 1)))))])
  (letrec ([d (lambda (i2) (if (<= i2 8)
                           (block
                             (printf "~a => ~a\n" i2 (vector-ref t0 i2))
                             (d (+ i2 1))
                             )
                           (letrec ([f (lambda (j) (if (<= j 80)
                                                   (block
                                                     (display (e t0 j))
                                                     (f (+ j 1))
                                                     )
                                                   (block
                                                     (display "\n")
                                                     (letrec ([g (lambda (k) (if (<= k 50)
                                                                             (block
                                                                               (display k)
                                                                               (g (+ k 1))
                                                                               )
                                                                             (block
                                                                               (display "\n")
                                                                               (letrec ([h (lambda (j2) 
                                                                                (if (<= j2 220)
                                                                                (block
                                                                                (display (e t0 j2))
                                                                                (h (+ j2 1))
                                                                                )
                                                                                (block
                                                                                (display "\n")
                                                                                (letrec ([m (lambda (k2) 
                                                                                (if (<= k2 110)
                                                                                (block
                                                                                (display k2)
                                                                                (m (+ k2 1))
                                                                                )
                                                                                (block
                                                                                (display "\n")
                                                                                (let ([out0 1])
                                                                                (letrec ([p (lambda (l out0) 
                                                                                (if (<= l 6)
                                                                                (let ([puiss (exp0 10 l)])
                                                                                (let ([v (e t0 (- puiss 1))])
                                                                                (let ([out0 (* out0 v)])
                                                                                (block
                                                                                (printf "10^~a=~a v=~a\n" l puiss v)
                                                                                (p (+ l 1) out0)
                                                                                ))))
                                                                                (printf "~a\n" out0)))])
                                                                                (p 0 out0)))
                                                                                )))])
                                                                                (m 90))
                                                                                )))])
                                                                                (h 169))
                                                                               )))])
                                                       (g 1))
                                                     )))])
                             (f 0))))])
    (d 1)))
)

