#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))
(define last-char 0)
(define next-char (lambda () (set! last-char (read-char (current-input-port)))))
(next-char)
(define mread-int (lambda ()
  (if (eq? #\- last-char)
  (block
    (next-char) (- 0 (mread-int)))
    (letrec ([w (lambda (out)
      (if (eof-object? last-char)
        out
        (if (and last-char (>= (char->integer last-char) (char->integer #\0)) (<= (char->integer last-char) (char->integer #\9)))
          (let ([out (+ (* 10 out) (- (char->integer last-char) (char->integer #\0)))])
            (block
              (next-char)
              (w out)
          ))
        out
      )))]) (w 0)))))
(define mread-blank (lambda ()
  (if (or (eq? last-char #\NewLine) (eq? last-char #\Space) ) (block (next-char) (mread-blank)) '())
))

(define copytab (lambda (tab len) 
                  (let ([o (array_init_withenv len (lambda (i) 
                                                     (lambda (_) (let ([k (vector-ref tab i)])
                                                                   (list '() k)))) '())])
                  o)))
(define bubblesort (lambda (tab len) 
                     (let ([g 0])
                       (let ([h (- len 1)])
                         (letrec ([c (lambda (i) 
                                       (if (<= i h)
                                         (let ([e (+ i 1)])
                                           (let ([f (- len 1)])
                                             (letrec ([d (lambda (j) 
                                                           (if (<= j f)
                                                             (block
                                                               (if (> (vector-ref tab i) (vector-ref tab j))
                                                                 (let ([tmp (vector-ref tab i)])
                                                                   (block
                                                                    (vector-set! tab i (vector-ref tab j))
                                                                    (vector-set! tab j tmp)
                                                                    '()
                                                                    ))
                                                                 '())
                                                               (d (+ j 1))
                                                               )
                                                             (c (+ i 1))))])
                                             (d e))))
                                       '()))])
                       (c g))))))
(define qsort_ (lambda (tab len i j) 
                 ((lambda (internal_env) (apply (lambda (i j) 
                                                       '()) internal_env)) 
                 (if (< i j)
                   (let ([i0 i])
                     (let ([j0 j])
                       ; pivot : tab[0] 
                       (letrec ([b (lambda (i j) 
                                     (if (not (eq? i j))
                                       ((lambda (internal_env) (apply (lambda
                                        (i j) 
                                       (b i j)) internal_env)) (if (> (vector-ref tab i) (vector-ref tab j))
                                                                 (let ([i 
                                                                   (if (eq? i (- j 1))
                                                                    ; on inverse simplement
                                                                    (let ([tmp (vector-ref tab i)])
                                                                    (block
                                                                    (vector-set! tab i (vector-ref tab j))
                                                                    (vector-set! tab j tmp)
                                                                    (let ([i (+ i 1)])
                                                                    i)
                                                                    ))
                                                                    ; on place tab[i+1] à la place de tab[j], tab[j] à la place de tab[i] et tab[i] à la place de tab[i+1] 
                                                                    (let ([tmp (vector-ref tab i)])
                                                                    (block
                                                                    (vector-set! tab i (vector-ref tab j))
                                                                    (vector-set! tab j (vector-ref tab (+ i 1)))
                                                                    (vector-set! tab (+ i 1) tmp)
                                                                    (let ([i (+ i 1)])
                                                                    i)
                                                                    )))])
                                                                   (list i j))
                                                                 (let ([j (- j 1)])
                                                                   (list i j))))
                                       (block
                                         (qsort_ tab len i0 (- i 1))
                                         (qsort_ tab len (+ i 1) j0)
                                         (list i j)
                                         )))])
                       (b i j))))
                 (list i j)))))
(define main (let ([len 2])
               ((lambda (v) 
                  (let ([len v])
                    (block (mread-blank) (let ([tab (array_init_withenv len 
                                           (lambda (i_) 
                                             (lambda (_) (let ([tmp 0])
                                                           ((lambda (m) 
                                                              (let ([tmp m])
                                                                (block (mread-blank) 
                                                                (let ([l tmp])
                                                                  (list '() l)) ))) (mread-int))))) '())])
                  (let ([tab2 (copytab tab len)])
                    (block
                      (bubblesort tab2 len)
                      (let ([s 0])
                        (let ([u (- len 1)])
                          (letrec ([r (lambda (i) 
                                        (if (<= i u)
                                          (block
                                            (display (vector-ref tab2 i))
                                            (display " ")
                                            (r (+ i 1))
                                            )
                                          (block
                                            (display "\n")
                                            (let ([tab3 (copytab tab len)])
                                              (block
                                                (qsort_ tab3 len 0 (- len 1))
                                                (let ([p 0])
                                                  (let ([q (- len 1)])
                                                    (letrec ([n (lambda (i) 
                                                                  (if (<= i q)
                                                                    (block
                                                                    (display (vector-ref tab3 i))
                                                                    (display " ")
                                                                    (n (+ i 1))
                                                                    )
                                                                    (display "\n")))])
                                                    (n p))))
                                              ))
                                          )))])
                        (r s))))
                  ))) ))) (mread-int))))

