#lang racket
(require racket/block)

(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))
(define last-char 0)
(define next-char (lambda () (set! last-char (read-char (current-input-port)))))
(next-char)
(define mread-char (lambda ()
  (let ([ out last-char])
    (block
      (next-char)
      out
    ))))

(define mread-int (lambda ()
  (if (eq? #\- last-char)
  (block
    (next-char) (- 0 (mread-int)))
    (letrec ([w (lambda (out)
      (if (eof-object? last-char)
        out
        (if (and last-char (>= (char->integer last-char) (char->integer #\0)) (<= (char->integer last-char) (char->integer #\9)))
          (let ([out (+ (* 10 out) (- (char->integer last-char) (char->integer #\0)))])
            (block
              (next-char)
              (w out)
          ))
        out
      )))]) (w 0)))))

(define mread-blank (lambda ()
  (if (or (eq? last-char #\NewLine) (eq? last-char #\Space) ) (block (next-char) (mread-blank)) '())
))

(define copytab (lambda (tab len) 
                  (let ([o (array_init_withenv len (lambda (i) 
                                                     (lambda (internal_env) (apply (lambda
                                                      (tab len) 
                                                     (let ([p (vector-ref tab i)])
                                                       (list (list tab len) p))) internal_env))) (list tab len))])
                  o)))
(define bubblesort (lambda (tab len) 
                     (let ([m 0])
                       (let ([n (- len 1)])
                         (letrec ([f (lambda (i tab len) 
                                       (if (<= i n)
                                         (let ([k (+ i 1)])
                                           (let ([l (- len 1)])
                                             (letrec ([g (lambda (j tab len) 
                                                           (if (<= j l)
                                                             (let ([h 
                                                               (lambda (tab len) 
                                                                 (g (+ j 1) tab len))])
                                                             (if (> (vector-ref tab i) (vector-ref tab j))
                                                               (let ([tmp (vector-ref tab i)])
                                                                 (block
                                                                   (vector-set! tab i (vector-ref tab j))
                                                                   (vector-set! tab j tmp)
                                                                   (h tab len)
                                                                   ))
                                                               (h tab len)))
                                                           (f (+ i 1) tab len)))])
                                           (g k tab len))))
                           '()))])
                     (f m tab len))))))
(define qsort_ (lambda (tab len i j) 
                 (let ([a (lambda (tab len i j) 
                            '())])
                 (if (< i j)
                   (let ([i0 i])
                     (let ([j0 j])
                       ; pivot : tab[0] 
                       (letrec ([c (lambda (j0 i0 tab len i j) 
                                     (if (not (eq? i j))
                                       (let ([d (lambda (j0 i0 tab len i j) 
                                                  (c j0 i0 tab len i j))])
                                       (if (> (vector-ref tab i) (vector-ref tab j))
                                         (let ([e (lambda (j0 i0 tab len i j) 
                                                    (d j0 i0 tab len i j))])
                                         (if (eq? i (- j 1))
                                           ; on inverse simplement
                                           (let ([tmp (vector-ref tab i)])
                                             (block
                                               (vector-set! tab i (vector-ref tab j))
                                               (vector-set! tab j tmp)
                                               (let ([i (+ i 1)])
                                                 (e j0 i0 tab len i j))
                                               ))
                                           ; on place tab[i+1] à la place de tab[j], tab[j] à la place de tab[i] et tab[i] à la place de tab[i+1] 
                                           (let ([tmp (vector-ref tab i)])
                                             (block
                                               (vector-set! tab i (vector-ref tab j))
                                               (vector-set! tab j (vector-ref tab (+ i 1)))
                                               (vector-set! tab (+ i 1) tmp)
                                               (let ([i (+ i 1)])
                                                 (e j0 i0 tab len i j))
                                               ))))
                                       (let ([j (- j 1)])
                                         (d j0 i0 tab len i j))))
                         (block
                           (qsort_ tab len i0 (- i 1))
                           (qsort_ tab len (+ i 1) j0)
                           (a tab len i j)
                           )))])
                   (c j0 i0 tab len i j))))
(a tab len i j)))))
(define main (let ([len 2])
               ((lambda (z) 
                  (let ([len z])
                    (block (mread-blank) (let ([tab (array_init_withenv len 
                                           (lambda (i_) 
                                             (lambda (len) 
                                               (let ([tmp 0])
                                                 ((lambda (r) 
                                                    (let ([tmp r])
                                                      (block (mread-blank) 
                                                      (let ([q tmp])
                                                        (list len q)) ))) (mread-int))))) len)])
               (let ([tab2 (copytab tab len)])
                 (block
                   (bubblesort tab2 len)
                   (let ([x 0])
                     (let ([y (- len 1)])
                       (letrec ([w (lambda (i tab2 len) 
                                     (if (<= i y)
                                       (block
                                         (display (vector-ref tab2 i))
                                         (display " ")
                                         (w (+ i 1) tab2 len)
                                         )
                                       (block
                                         (display "\n")
                                         (let ([tab3 (copytab tab len)])
                                           (block
                                             (qsort_ tab3 len 0 (- len 1))
                                             (let ([u 0])
                                               (let ([v (- len 1)])
                                                 (letrec ([s (lambda (i tab3 tab2 len) 
                                                               (if (<= i v)
                                                                 (block
                                                                   (display (vector-ref tab3 i))
                                                                   (display " ")
                                                                   (s (+ i 1) tab3 tab2 len)
                                                                   )
                                                                 (display "\n")))])
                                                 (s u tab3 tab2 len))))
                                           ))
                                       )))])
                     (w x tab2 len))))
               ))) ))) (mread-int))))

