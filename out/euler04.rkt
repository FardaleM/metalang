#lang racket
(require racket/block)

(define (max2 a b)
  ;toto
  (let ([h (lambda (_) 
             '())])
  (if (> a b)
  a
  b))
)
(define (chiffre c m)
  ;toto
  (let ([g (lambda (_) 
             '())])
  (if (eq? c 0)
  (remainder m 10)
  (chiffre (- c 1) (quotient m 10))))
)
(define main
  (let ([m 1])
  (let ([ba 0])
  (let ([bb 9])
  (letrec ([i (lambda (a m) 
                (if (<= a bb)
                (let ([y 1])
                (let ([z 9])
                (letrec ([j (lambda (f m) 
                              (if (<= f z)
                              (let ([w 0])
                              (let ([x 9])
                              (letrec ([k (lambda (d m) 
                                            (if (<= d x)
                                            (let ([u 1])
                                            (let ([v 9])
                                            (letrec ([l (lambda (c m) 
                                                          (if (<= c v)
                                                          (let ([r 0])
                                                          (let ([s 9])
                                                          (letrec ([n 
                                                            (lambda (b m) 
                                                              (if (<= b s)
                                                              (let ([p 0])
                                                              (let ([q 9])
                                                              (letrec ([o 
                                                                (lambda (e m) 
                                                                  (if (<= e q)
                                                                  (let ([mul (+ (+ (+ (+ (* a d) (* 10 (+ (* a e) (* b d)))) (* 100 (+ (+ (* a f) (* b e)) (* c d)))) (* 1000 (+ (* c e) (* b f)))) (* (* 10000 c) f))])
                                                                  (let ([m 
                                                                  (if (and (and (eq? (chiffre 0 mul) (chiffre 5 mul)) (eq? (chiffre 1 mul) (chiffre 4 mul))) (eq? (chiffre 2 mul) (chiffre 3 mul)))
                                                                  (let ([m (max2 mul m)])
                                                                  m)
                                                                  m)])
                                                                  (o (+ e 1) m)))
                                                                  (n (+ b 1) m)))])
                                                              (o p m))))
                                                              (l (+ c 1) m)))])
                                                          (n r m))))
                                              (k (+ d 1) m)))])
                                            (l u m))))
                              (j (+ f 1) m)))])
                              (k w m))))
                (i (+ a 1) m)))])
    (j y m))))
  (block
    (display m)
    (display "\n")
    )))])
(i ba m)))))
)

