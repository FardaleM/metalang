#lang racket
(require racket/block)

(define (chiffre c m)
  ;toto
  (if (eq? c 0)
  (remainder m 10)
  (chiffre (- c 1) (quotient m 10)))
)
(define main
  (let ([m 1])
  (letrec ([g (lambda (a m) 
                (if (<= a 9)
                (letrec ([h (lambda (f m) 
                              (if (<= f 9)
                              (letrec ([i (lambda (d m) 
                                            (if (<= d 9)
                                            (letrec ([j (lambda (c m) 
                                                          (if (<= c 9)
                                                          (letrec ([k (lambda (b m) 
                                                                        (if (<= b 9)
                                                                        (letrec ([l 
                                                                          (lambda (e m) 
                                                                            (if (<= e 9)
                                                                            (let ([mul (+ (+ (+ (+ (* a d) (* 10 (+ (* a e) (* b d)))) (* 100 (+ (+ (* a f) (* b e)) (* c d)))) (* 1000 (+ (* c e) (* b f)))) (* (* 10000 c) f))])
                                                                            (if (and (and (eq? (chiffre 0 mul) (chiffre 5 mul)) (eq? (chiffre 1 mul) (chiffre 4 mul))) (eq? (chiffre 2 mul) (chiffre 3 mul)))
                                                                            (let ([m (max mul m)])
                                                                            (l (+ e 1) m))
                                                                            (l (+ e 1) m)))
                                                                            (k (+ b 1) m)))])
                                                                        (l 0 m))
                                                                        (j (+ c 1) m)))])
                                                          (k 0 m))
                                              (i (+ d 1) m)))])
                                (j 1 m))
                              (h (+ f 1) m)))])
                (i 0 m))
                (g (+ a 1) m)))])
  (h 1 m))
(printf "~a\n" m)))])
(g 0 m)))
)

