#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))

(define (eratostene t0 max0)
  ;toto
  (let ([n 0])
  (let ([c 2])
  (let ([d (- max0 1)])
  (letrec ([a (lambda (i n) 
                (if (<= i d)
                (let ([n (if (eq? (vector-ref t0 i) i)
                         (let ([n (+ n 1)])
                         (block
                           (if (> (quotient max0 i) i)
                           (let ([j (* i i)])
                           (letrec ([b (lambda (j) 
                                         (if (and (< j max0) (> j 0))
                                         (block
                                           (vector-set! t0 j 0)
                                           (let ([j (+ j i)])
                                           (b j))
                                           )
                                         '()))])
                           (b j)))
                           '())
                         n
                         ))
                n)])
                (a (+ i 1) n))
                n))])
  (a c n)))))
)
(define main
  (let ([maximumprimes 6000])
  (let ([era (array_init_withenv maximumprimes (lambda (j_) 
                                                 (lambda (_) (let ([e j_])
                                                             (list '() e)))) '())])
  (let ([nprimes (eratostene era maximumprimes)])
  (let ([primes (array_init_withenv nprimes (lambda (o) 
                                              (lambda (_) (let ([f 0])
                                                          (list '() f)))) '())])
  (let ([l 0])
  (let ([z 2])
  (let ([ba (- maximumprimes 1)])
  (letrec ([y (lambda (k l) 
                (if (<= k ba)
                (let ([l (if (eq? (vector-ref era k) k)
                         (block
                           (vector-set! primes l k)
                           (let ([l (+ l 1)])
                           l)
                           )
                         l)])
                (y (+ k 1) l))
                (block
                  (map display (list l " == " nprimes "\n"))
                  (let ([canbe (array_init_withenv maximumprimes (lambda (i_) 
                                                                   (lambda (_) 
                                                                   (let ([g #f])
                                                                   (list '() g)))) '())])
                  (let ([w 0])
                  (let ([x (- nprimes 1)])
                  (letrec ([r (lambda (i) 
                                (if (<= i x)
                                (let ([u 0])
                                (let ([v (- maximumprimes 1)])
                                (letrec ([s (lambda (j) 
                                              (if (<= j v)
                                              (let ([n (+ (vector-ref primes i) (* (* 2 j) j))])
                                              (block
                                                (if (< n maximumprimes)
                                                (vector-set! canbe n #t)
                                                '())
                                                (s (+ j 1))
                                                ))
                                              (r (+ i 1))))])
                                (s u))))
                                (let ([p 1])
                                (let ([q maximumprimes])
                                (letrec ([h (lambda (m) 
                                              (if (<= m q)
                                              (let ([m2 (+ (* m 2) 1)])
                                              (block
                                                (if (and (< m2 maximumprimes) (not (vector-ref canbe m2)))
                                                (block
                                                  (map display (list m2 "\n"))
                                                  )
                                                '())
                                                (h (+ m 1))
                                                ))
                                              '()))])
                                (h p))))))])
                  (r w)))))
  )))])
  (y z l)))))))))
)

