#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (let ((tab (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    ))))) (list env tab))))

(define (eratostene t0 max0)
  ;toto
  (let ([n 0])
  (let ([c (- max0 1)])
  (letrec ([a (lambda (i n) 
                (if (<= i c)
                (if (eq? (vector-ref t0 i) i)
                (let ([n (+ n 1)])
                (if (> (quotient max0 i) i)
                (let ([j (* i i)])
                (letrec ([b (lambda (j) 
                              (if (and (< j max0) (> j 0))
                              (block
                                (vector-set! t0 j 0)
                                (let ([j (+ j i)])
                                (b j))
                                )
                              (a (+ i 1) n)))])
                (b j)))
                (a (+ i 1) n)))
                (a (+ i 1) n))
                n))])
  (a 2 n))))
)
(define main
  (let ([maximumprimes 6000])
  ((lambda (internal_env) (apply (lambda (e era) 
                                        (let ([nprimes (eratostene era maximumprimes)])
                                        ((lambda (internal_env) (apply (lambda (g primes) 
                                                                              (let ([l 0])
                                                                              (let ([x (- maximumprimes 1)])
                                                                              (letrec ([w 
                                                                                (lambda (k l) 
                                                                                (if (<= k x)
                                                                                (if (eq? (vector-ref era k) k)
                                                                                (block
                                                                                (vector-set! primes l k)
                                                                                (let ([l (+ l 1)])
                                                                                (w (+ k 1) l))
                                                                                )
                                                                                (w (+ k 1) l))
                                                                                (block
                                                                                (map display (list l " == " nprimes "\n"))
                                                                                ((lambda (internal_env) (apply (lambda
                                                                                 (p canbe) 
                                                                                (let ([v (- nprimes 1)])
                                                                                (letrec ([r 
                                                                                (lambda (i) 
                                                                                (if (<= i v)
                                                                                (let ([u (- maximumprimes 1)])
                                                                                (letrec ([s 
                                                                                (lambda (j) 
                                                                                (if (<= j u)
                                                                                (let ([n (+ (vector-ref primes i) (* (* 2 j) j))])
                                                                                (if (< n maximumprimes)
                                                                                (block
                                                                                (vector-set! canbe n #t)
                                                                                (s (+ j 1))
                                                                                )
                                                                                (s (+ j 1))))
                                                                                (r (+ i 1))))])
                                                                                (s 0)))
                                                                                (letrec ([q 
                                                                                (lambda (m) 
                                                                                (if (<= m maximumprimes)
                                                                                (let ([m2 (+ (* m 2) 1)])
                                                                                (if (and (< m2 maximumprimes) (not (vector-ref canbe m2)))
                                                                                (block
                                                                                (map display (list m2 "\n"))
                                                                                (q (+ m 1))
                                                                                )
                                                                                (q (+ m 1))))
                                                                                '()))])
                                                                                (q 1))))])
                                                                                (r 0)))) internal_env)) (array_init_withenv maximumprimes 
                                                                                (lambda (i_) 
                                                                                (lambda (p) 
                                                                                (let ([h #f])
                                                                                (list '() h)))) '()))
                                                                              )))])
  (w 2 l))))) internal_env)) (array_init_withenv nprimes (lambda (o) 
                                                           (lambda (g) 
                                                             (let ([f 0])
                                                             (list '() f)))) '())))) internal_env)) (array_init_withenv maximumprimes 
(lambda (j_) 
  (lambda (e) 
    (let ([d j_])
    (list '() d)))) '())))
)

