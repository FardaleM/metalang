#lang racket
(require racket/block)
(define main (let ([maximum 1])
                                                   (let ([b0 2])
                                                     (let ([a 408464633])
                                                       (letrec ([d (lambda (a b0) 
                                                                    (if (not (eq? a 1))
                                                                    (let ([b b0])
                                                                    (let ([found #f])
                                                                    (letrec ([f 
                                                                    (lambda (a b b0 found) 
                                                                    (if (< (* b b) a)
                                                                    ((lambda (internal_env) (apply (lambda
                                                                     (a b b0 found) 
                                                                    (let ([b (+ b 1)])
                                                                    (f a b b0 found))) internal_env)) 
                                                                    (if (eq? (remainder a b) 0)
                                                                    (let ([a (quotient a b)])
                                                                    (let ([b0 b])
                                                                    (let ([b a])
                                                                    (let ([found #t])
                                                                    (list a b b0 found)))))
                                                                    (list a b b0 found)))
                                                                    (let ([a 
                                                                    (if (not found)
                                                                    (block
                                                                    (display a)
                                                                    (display "\n")
                                                                    (let ([a 1])
                                                                    a)
                                                                    )
                                                                    a)])
                                                                    (d a b0))))])
                                                                    (f a b b0 found))))
                                                                    '()))])
                                                     (d a b0))))))

