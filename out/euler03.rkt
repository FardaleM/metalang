#lang racket
(require racket/block)

(define main
  (let ([maximum 1])
  (let ([b0 2])
  (let ([a 408464633])
  (let ([sqrtia (integer-sqrt a)])
  (letrec ([f (lambda (a b0 sqrtia) 
                (if (not (eq? a 1))
                (let ([b b0])
                (let ([found #f])
                (letrec ([g (lambda (a b b0 found sqrtia) 
                              (if (<= b sqrtia)
                              ((lambda (internal_env) (apply (lambda (a b b0 found sqrtia) 
                                                                    (let ([b (+ b 1)])
                                                                    (g a b b0 found sqrtia))) internal_env)) 
                              (if (eq? (remainder a b) 0)
                              (let ([a (quotient a b)])
                              (let ([b0 b])
                              (let ([b a])
                              (let ([sqrtia (integer-sqrt a)])
                              (let ([found #t])
                              (list a b b0 found sqrtia))))))
                              (list a b b0 found sqrtia)))
                              (let ([a (if (not found)
                                       (block
                                         (map display (list a "\n"))
                                         (let ([a 1])
                                         a)
                                         )
                                       a)])
                              (f a b0 sqrtia))))])
                (g a b b0 found sqrtia))))
                '()))])
  (f a b0 sqrtia))))))
)

