
open System
let eof = ref false
let buffer = ref ""
let readChar_ () =
  if (!buffer) = "" then
    let tmp = Console.ReadLine()
    eof := tmp = null
    buffer := tmp + "\n"
  (!buffer).[0]

let consommeChar () =
  ignore (readChar_ ())
  buffer := (!buffer).[1..]

let readChar () =
  let out_ = readChar_ ()
  consommeChar ()
  out_

let stdin_sep () =
  let cond () =
    if !eof then
      false
    else
      let c = readChar_()
      c = ' ' || c = '\n' || c = '\t' || c = '\r'
  while cond () do
    consommeChar ()

let readInt () =
  let sign =
    if readChar_ () = '-' then
      consommeChar ()
      -1
    else 1
  let rec loop i =
    let c = readChar_ ()
    if c <= '9' && c >= '0' then
      consommeChar ()
      loop (i * 10 + (int c) - (int '0'))
    else
      i * sign
  loop 0

let is_number (c:char) : bool =
  int (c) <= int ('9') && int (c) >= int ('0')

(*
Notation polonaise inversée, ce test permet d'évaluer une expression écrite en NPI
*)
let npi0 (str:char array) len =
  let stack = Array.create len 0
  let ptrStack = ref( 0 )
  let ptrStr = ref( 0 )
  while (!ptrStr) < len do
    if str.[(!ptrStr)] = ' ' then
      ptrStr := (!ptrStr) + 1
      
    else if is_number str.[(!ptrStr)] then
        let num = ref( 0 )
        while str.[(!ptrStr)] <> ' ' do
          num := (!num) * 10 + int (str.[(!ptrStr)]) - int ('0')
          ptrStr := (!ptrStr) + 1
        
        stack.[(!ptrStack)] <- (!num)
        ptrStack := (!ptrStack) + 1
    else if str.[(!ptrStr)] = '+' then
        stack.[(!ptrStack) - 2] <- stack.[(!ptrStack) - 2] + stack.[(!ptrStack) - 1]
        ptrStack := (!ptrStack) - 1
        ptrStr := (!ptrStr) + 1
  
  stack.[0]

let () =
  let len = ref( 0 )
  len := readInt()
  stdin_sep();
  let tab = Array.init (!len) (fun _i ->
    let tmp = ref( '\000' )
    tmp := readChar()
    (!tmp))
  let result = npi0 tab (!len)
  Printf.printf "%d" result
 