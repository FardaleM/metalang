open System

let eof = ref false
let buffer = ref ""
let readChar_ () =
  if (!buffer) = "" then
    let tmp = Console.ReadLine()
    eof := tmp = null
    buffer := tmp + "\n"
  (!buffer).[0]

let consommeChar () =
  ignore (readChar_ ())
  buffer := (!buffer).[1..]

let stdin_sep () =
  let cond () =
    if !eof then
      false
    else
      let c = readChar_()
      c = ' ' || c = '\n' || c = '\t' || c = '\r'
  while cond () do
    consommeChar ()

let readInt () =
  let sign =
    if readChar_ () = '-' then
      consommeChar ()
      -1
    else 1
  let rec loop i =
    let c = readChar_ ()
    if c <= '9' && c >= '0' then
      consommeChar ()
      loop (i * 10 + (int c) - (int '0'))
    else
      i * sign
  loop 0
(*
Ce test permet de vérifier que l'implémentation de l'affectation fonctionne correctement
*)
type toto = {
  mutable foo : int;
  mutable bar : int;
  mutable blah : int;
};;

let mktoto v1 : toto =
  let t = {foo=v1;
  bar=v1;
  blah=v1}
  t

let mktoto2 v1 : toto =
  let t = {foo=v1 + 3;
  bar=v1 + 2;
  blah=v1 + 1}
  t

let result (t_:toto) (t2_:toto) =
  let t = t_
  let t2 = t2_
  let t3 = {foo=0;
  bar=0;
  blah=0}
  let t3 = t2
  let t = t2
  let t2 = t3
  t.blah <- t.blah + 1
  let len = 1
  let cache0 = Array.init len (fun i ->
    (- i))
  let cache1 = Array.init len (fun j ->
    j)
  let cache2 = cache0
  let cache0 = cache1
  let cache2 = cache0
  t.foo + t.blah * t.bar + t.bar * t.foo

let () =
  let t = mktoto 4
  let t2 = mktoto 5
  t.bar <- readInt()
  stdin_sep();
  t.blah <- readInt()
  stdin_sep();
  t2.bar <- readInt()
  stdin_sep();
  t2.blah <- readInt()
  Printf.printf "%d%d" (result t t2) t.blah
 