
open System
let eof = ref false
let buffer = ref ""
let readChar_ () =
  if (!buffer) = "" then
    let tmp = Console.ReadLine()
    eof := tmp = null
    buffer := tmp + "\n"
  (!buffer).[0]

let consommeChar () =
  ignore (readChar_ ())
  buffer := (!buffer).[1..]

let readChar () =
  let out_ = readChar_ ()
  consommeChar ()
  out_

let stdin_sep () =
  let cond () =
    if !eof then
      false
    else
      let c = readChar_()
      c = ' ' || c = '\n' || c = '\t' || c = '\r'
  while cond () do
    consommeChar ()

let readInt () =
  let sign =
    if readChar_ () = '-' then
      consommeChar ()
      -1
    else 1
  let rec loop i =
    let c = readChar_ ()
    if c <= '9' && c >= '0' then
      consommeChar ()
      loop (i * 10 + (int c) - (int '0'))
    else
      i * sign
  loop 0
(*
Ce test permet de vérifier si les différents backends pour les langages implémentent bien
read int, read char et skip
*)
let () =
  let len = readInt()
  stdin_sep();
  Printf.printf "%d=len\n" len
  let tab = Array.init len (fun _a ->
    let b = readInt()
    stdin_sep();
    b)
  for i = 0 to len - 1 do
    Printf.printf "%d=>%d " i tab.[i]
  Printf.printf "\n"
  let tab2 = Array.init len (fun _d ->
    let e = readInt()
    stdin_sep();
    e)
  for i_ = 0 to len - 1 do
    Printf.printf "%d==>%d " i_ tab2.[i_]
  let strlen = readInt()
  stdin_sep();
  Printf.printf "%d=strlen\n" strlen
  let tab4 = Array.init strlen (fun _f ->
    let g = readChar()
    g)
  stdin_sep();
  for i3 = 0 to strlen - 1 do
    let tmpc = tab4.[i3]
    let c = ref( int (tmpc) )
    Printf.printf "%c:%d " tmpc (!c)
    if tmpc <> ' ' then
      c := ((!c) - int ('a') + 13) % 26 + int ('a')
      
    tab4.[i3] <- char ((!c))
  for j = 0 to strlen - 1 do
    Printf.printf "%c" tab4.[j]
 