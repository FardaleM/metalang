#lang racket
(require racket/block)

(define main
  (let ([f (build-vector 10 (lambda (j) 
                              1))])
  (letrec ([h (lambda (i) 
                (if (<= i 9)
                (block
                  (vector-set! f i (* (vector-ref f i) i (vector-ref f (- i 1))))
                  (printf "~a " (vector-ref f i))
                  (h (+ i 1))
                  )
                (let ([out0 0])
                (block
                  (display "\n")
                  (letrec ([k (lambda (a out0) 
                                (if (<= a 9)
                                (letrec ([l (lambda (b out0) 
                                              (if (<= b 9)
                                              (letrec ([m (lambda (c out0) 
                                                            (if (<= c 9)
                                                            (letrec ([n (lambda (d out0) 
                                                                          (if (<= d 9)
                                                                          (letrec ([o 
                                                                            (lambda (e out0) 
                                                                              (if (<= e 9)
                                                                              (letrec ([p 
                                                                                (lambda (g out0) 
                                                                                (if (<= g 9)
                                                                                (let ([sum (+ (vector-ref f a) (vector-ref f b) (vector-ref f c) (vector-ref f d) (vector-ref f e) (vector-ref f g))])
                                                                                (let ([num (+ (* (+ (* (+ (* (+ (* (+ (* a 10) b) 10) c) 10) d) 10) e) 10) g)])
                                                                                (let ([sum 
                                                                                (if (eq? a 0)
                                                                                (let ([sum (- sum 1)])
                                                                                (if (eq? b 0)
                                                                                (let ([sum (- sum 1)])
                                                                                (if (eq? c 0)
                                                                                (let ([sum (- sum 1)])
                                                                                (if (eq? d 0)
                                                                                (let ([sum (- sum 1)])
                                                                                sum)
                                                                                sum))
                                                                                sum))
                                                                                sum))
                                                                                sum)])
                                                                                (if (and (eq? sum num) (not (eq? sum 1)) (not (eq? sum 2)))
                                                                                (let ([out0 (+ out0 num)])
                                                                                (block
                                                                                (printf "~a " num)
                                                                                (p (+ g 1) out0)
                                                                                ))
                                                                                (p (+ g 1) out0)))))
                                                                                (o (+ e 1) out0)))])
                                                                              (p 0 out0))
                                                                              (n (+ d 1) out0)))])
                                                                          (o 0 out0))
                                                              (m (+ c 1) out0)))])
                                                (n 0 out0))
                                              (l (+ b 1) out0)))])
                                (m 0 out0))
                                (k (+ a 1) out0)))])
                (l 0 out0))
                (printf "\n~a\n" out0)))])
  (k 0 out0))
))))])
(h 1)))
)

