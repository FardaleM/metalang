#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))

(define main
  (let ([input #\Space])
  (let ([current_pos 500])
  (let ([mem0 (array_init_withenv 1000 (lambda (i) 
                                         (lambda (_) (let ([a 0])
                                                     (list '() a)))) '())])
  (block
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
    (let ([current_pos (+ current_pos 1)])
    (block
      (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
      (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
      (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
      (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
      (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
      (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
      (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
      (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
      (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
      (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
      (letrec ([b (lambda (current_pos) 
                    (if (not (eq? (vector-ref mem0 current_pos) 0))
                    (block
                      (vector-set! mem0 current_pos (- (vector-ref mem0 current_pos) 1))
                      (let ([current_pos (- current_pos 1)])
                      (block
                        (vector-set! mem0 current_pos (+ (vector-ref mem0 current_pos) 1))
                        (display (integer->char (vector-ref mem0 current_pos)))
                        (let ([current_pos (+ current_pos 1)])
                        (b current_pos))
                        ))
                      )
                    '()))])
      (b current_pos))
    ))
  ))))
)

