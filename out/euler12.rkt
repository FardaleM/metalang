#lang racket
(require racket/block)

(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))
(define last-char 0)
(define next-char (lambda () (set! last-char (read-char (current-input-port)))))
(next-char)
(define mread-char (lambda ()
  (let ([ out last-char])
    (block
      (next-char)
      out
    ))))

(define mread-int (lambda ()
  (if (eq? #\- last-char)
  (block
    (next-char) (- 0 (mread-int)))
    (letrec ([w (lambda (out)
      (if (eof-object? last-char)
        out
        (if (and last-char (>= (char->integer last-char) (char->integer #\0)) (<= (char->integer last-char) (char->integer #\9)))
          (let ([out (+ (* 10 out) (- (char->integer last-char) (char->integer #\0)))])
            (block
              (next-char)
              (w out)
          ))
        out
      )))]) (w 0)))))

(define mread-blank (lambda ()
  (if (or (eq? last-char #\NewLine) (eq? last-char #\Space) ) (block (next-char) (mread-blank)) '())
))

(define max2 (lambda (a b) 
               (let ([bn (lambda (a b) 
                           '())])
               (if (> a b)
                 a
                 b))))
(define eratostene (lambda (t_ max_) 
                     (let ([n 0])
                       (let ([bl 2])
                         (let ([bm (- max_ 1)])
                           (letrec ([bh (lambda (i n t_ max_) 
                                          (if (<= i bm)
                                            (let ([bi (lambda (n t_ max_) 
                                                        (bh (+ i 1) n t_ max_))])
                                            (if (eq? (vector-ref t_ i) i)
                                              (let ([j (* i i)])
                                                (let ([n (+ n 1)])
                                                  (letrec ([bk (lambda (j n t_ max_) 
                                                                 (if (and (< j max_) (> j 0))
                                                                   (block
                                                                    (vector-set! t_ j 0)
                                                                    (let ([j (+ j i)])
                                                                    (bk j n t_ max_))
                                                                    )
                                                                   (bi n t_ max_)))])
                                                  (bk j n t_ max_))))
                                            (bi n t_ max_)))
                             n))])
                       (bh bl n t_ max_)))))))
(define fillPrimesFactors (lambda (t_ n primes nprimes) 
                            (let ([bf 0])
                              (let ([bg (- nprimes 1)])
                                (letrec ([bb (lambda (i t_ n primes nprimes) 
                                               (if (<= i bg)
                                                 (let ([d (vector-ref primes i)])
                                                   (letrec ([be (lambda (d t_ n primes nprimes) 
                                                                  (if (eq? (remainder n d) 0)
                                                                    (block
                                                                    (vector-set! t_ d (+ (vector-ref t_ d) 1))
                                                                    (let ([n (quotient n d)])
                                                                    (be d t_ n primes nprimes))
                                                                    )
                                                                    (let ([bc 
                                                                    (lambda (d t_ n primes nprimes) 
                                                                    (bb (+ i 1) t_ n primes nprimes))])
                                                                    (if (eq? n 1)
                                                                    (vector-ref primes i)
                                                                    (bc d t_ n primes nprimes)))))])
                                                 (be d t_ n primes nprimes)))
                                  n))])
                            (bb bf t_ n primes nprimes))))))
(define find_ (lambda (ndiv2) 
                (let ([maximumprimes 110])
                  (let ([era (array_init_withenv maximumprimes (lambda (j) 
                                                                 (lambda (internal_env) (apply (lambda
                                                                  (maximumprimes ndiv2) 
                                                                 (let ([e j])
                                                                   (list (list maximumprimes ndiv2) e))) internal_env))) (list maximumprimes ndiv2))])
                  (let ([nprimes (eratostene era maximumprimes)])
                    (let ([primes (array_init_withenv nprimes (lambda (o) 
                                                                (lambda (internal_env) (apply (lambda
                                                                 (nprimes maximumprimes ndiv2) 
                                                                (let ([f 0])
                                                                  (list (list nprimes maximumprimes ndiv2) f))) internal_env))) (list nprimes maximumprimes ndiv2))])
                    (let ([l 0])
                      (let ([z 2])
                        (let ([ba (- maximumprimes 1)])
                          (letrec ([x (lambda (k l nprimes maximumprimes ndiv2) 
                                        (if (<= k ba)
                                          (let ([y (lambda (l nprimes maximumprimes ndiv2) 
                                                     (x (+ k 1) l nprimes maximumprimes ndiv2))])
                                          (if (eq? (vector-ref era k) k)
                                            (block
                                              (vector-set! primes l k)
                                              (let ([l (+ l 1)])
                                                (y l nprimes maximumprimes ndiv2))
                                              )
                                            (y l nprimes maximumprimes ndiv2)))
                                        (let ([v 1])
                                          (let ([w 10000])
                                            (letrec ([g (lambda (n l nprimes maximumprimes ndiv2) 
                                                          (if (<= n w)
                                                            (let ([c (+ n 2)])
                                                              (let ([primesFactors (array_init_withenv c 
                                                                (lambda (m) 
                                                                  (lambda (internal_env) (apply (lambda
                                                                   (c l nprimes maximumprimes ndiv2) 
                                                                  (let ([h 0])
                                                                    (list (list c l nprimes maximumprimes ndiv2) h))) internal_env))) (list c l nprimes maximumprimes ndiv2))])
                                                              (let ([max_ (max2 (fillPrimesFactors primesFactors n primes nprimes) (fillPrimesFactors primesFactors (+ n 1) primes nprimes))])
                                                                (block
                                                                  (vector-set! primesFactors 2 (- (vector-ref primesFactors 2) 1))
                                                                  (let ([ndivs 1])
                                                                    (let ([s 0])
                                                                    (let ([u max_])
                                                                    (letrec ([q 
                                                                    (lambda (i ndivs max_ c l nprimes maximumprimes ndiv2) 
                                                                    (if (<= i u)
                                                                    (let ([r 
                                                                    (lambda (ndivs max_ c l nprimes maximumprimes ndiv2) 
                                                                    (q (+ i 1) ndivs max_ c l nprimes maximumprimes ndiv2))])
                                                                    (if (not (eq? (vector-ref primesFactors i) 0))
                                                                    (let ([ndivs (* ndivs (+ 1 (vector-ref primesFactors i)))])
                                                                    (r ndivs max_ c l nprimes maximumprimes ndiv2))
                                                                    (r ndivs max_ c l nprimes maximumprimes ndiv2)))
                                                                    (let ([p 
                                                                    (lambda (ndivs max_ c l nprimes maximumprimes ndiv2) 
                                                                    ; print "n=" print n print "\t" print (n * (n + 1) / 2 ) print " " print ndivs print "\n" 
                                                                    (g (+ n 1) l nprimes maximumprimes ndiv2))])
                                                                    (if (> ndivs ndiv2)
                                                                    (quotient (* n (+ n 1)) 2)
                                                                    (p ndivs max_ c l nprimes maximumprimes ndiv2)))))])
                                                                    (q s ndivs max_ c l nprimes maximumprimes ndiv2)))))
                                                            ))))
                                          0))])
                          (g v l nprimes maximumprimes ndiv2))))))])
  (x z l nprimes maximumprimes ndiv2)))))))))))
(define main (block
               (display (find_ 500))
               (display "\n")
               '()
               ))

