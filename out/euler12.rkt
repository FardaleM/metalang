#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))

(define (eratostene t0 max0)
  ;toto
  (let ([n 0])
  (let ([bd 2])
  (let ([be (- max0 1)])
  (letrec ([bb (lambda (i n) 
                 (if (<= i be)
                 (let ([n (if (eq? (vector-ref t0 i) i)
                          (let ([j (* i i)])
                          (let ([n (+ n 1)])
                          (letrec ([bc (lambda (j) 
                                         (if (and (< j max0) (> j 0))
                                         (block
                                           (vector-set! t0 j 0)
                                           (let ([j (+ j i)])
                                           (bc j))
                                           )
                                         n))])
                          (bc j))))
                 n)])
                 (bb (+ i 1) n))
                 n))])
  (bb bd n)))))
)
(define (fillPrimesFactors t0 n primes nprimes)
  ;toto
  (let ([z 0])
  (let ([ba (- nprimes 1)])
  (letrec ([x (lambda (i n) 
                (if (<= i ba)
                (let ([d (vector-ref primes i)])
                (letrec ([y (lambda (n) 
                              (if (eq? (remainder n d) 0)
                              (block
                                (vector-set! t0 d (+ (vector-ref t0 d) 1))
                                (let ([n (quotient n d)])
                                (y n))
                                )
                              (if (eq? n 1)
                              (vector-ref primes i)
                              (x (+ i 1) n))))])
                (y n)))
                n))])
  (x z n))))
)
(define (find0 ndiv2)
  ;toto
  (let ([maximumprimes 110])
  (let ([era (array_init_withenv maximumprimes (lambda (j) 
                                                 (lambda (_) (let ([c j])
                                                             (list '() c)))) '())])
  (let ([nprimes (eratostene era maximumprimes)])
  (let ([primes (array_init_withenv nprimes (lambda (o) 
                                              (lambda (_) (let ([e 0])
                                                          (list '() e)))) '())])
  (let ([l 0])
  (let ([v 2])
  (let ([w (- maximumprimes 1)])
  (letrec ([u (lambda (k l) 
                (if (<= k w)
                (let ([l (if (eq? (vector-ref era k) k)
                         (block
                           (vector-set! primes l k)
                           (let ([l (+ l 1)])
                           l)
                           )
                         l)])
                (u (+ k 1) l))
                (let ([r 1])
                (let ([s 10000])
                (letrec ([f (lambda (n) 
                              (if (<= n s)
                              (let ([primesFactors (array_init_withenv (+ n 2) 
                              (lambda (m) 
                                (lambda (_) (let ([g 0])
                                            (list '() g)))) '())])
                              (let ([max0 (max (fillPrimesFactors primesFactors n primes nprimes) (fillPrimesFactors primesFactors (+ n 1) primes nprimes))])
                              (block
                                (vector-set! primesFactors 2 (- (vector-ref primesFactors 2) 1))
                                (let ([ndivs 1])
                                (let ([p 0])
                                (let ([q max0])
                                (letrec ([h (lambda (i ndivs) 
                                              (if (<= i q)
                                              (let ([ndivs (if (not (eq? (vector-ref primesFactors i) 0))
                                                           (let ([ndivs (* ndivs (+ 1 (vector-ref primesFactors i)))])
                                                           ndivs)
                                                           ndivs)])
                                              (h (+ i 1) ndivs))
                                              (if (> ndivs ndiv2)
                                              (quotient (* n (+ n 1)) 2)
                                              ; print "n=" print n print "\t" print (n * (n + 1) / 2 ) print " " print ndivs print "\n" 
                                              (f (+ n 1)))))])
                                (h p ndivs)))))
                              )))
                  0))])
                (f r))))))])
  (u v l)))))))))
)
(define main
  (block
    (map display (list (find0 500) "\n"))
    '()
    )
)

