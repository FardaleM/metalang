#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))

(define (min2 a b)
  ;toto
  (min a b)
)
(define (eratostene t_ max_)
  ;toto
  (let ([n 0])
  (let ([f 2])
  (let ([g (- max_ 1)])
  (letrec ([c (lambda (i n) 
                (if (<= i g)
                (let ([n (if (eq? (vector-ref t_ i) i)
                         (let ([n (+ n 1)])
                         (let ([j (* i i)])
                         (let ([j (if (eq? (quotient j i) i)
                                  ; overflow test 
                                  (letrec ([e (lambda (j) 
                                                (if (and (< j max_) (> j 0))
                                                (block
                                                  (vector-set! t_ j 0)
                                                  (let ([j (+ j i)])
                                                  (e j))
                                                  )
                                                j))])
                                  (e j))
                         j)])
                         n)))
                n)])
                (c (+ i 1) n))
                n))])
  (c f n)))))
)
(define main
  (let ([maximumprimes 1000001])
  (let ([era (array_init_withenv maximumprimes (lambda (j) 
                                                 (lambda (_) (let ([h j])
                                                             (list '() h)))) '())])
  (let ([nprimes (eratostene era maximumprimes)])
  (let ([primes (array_init_withenv nprimes (lambda (o) 
                                              (lambda (_) (let ([m 0])
                                                          (list '() m)))) '())])
  (let ([l 0])
  (let ([x 2])
  (let ([y (- maximumprimes 1)])
  (letrec ([w (lambda (k l) 
                (if (<= k y)
                (let ([l (if (eq? (vector-ref era k) k)
                         (block
                           (vector-set! primes l k)
                           (let ([l (+ l 1)])
                           l)
                           )
                         l)])
                (w (+ k 1) l))
                (block
                  (map display (list l " == " nprimes "\n"))
                  (let ([sum (array_init_withenv nprimes (lambda (i_) 
                                                           (lambda (_) 
                                                           (let ([p (vector-ref primes i_)])
                                                           (list '() p)))) '())])
                  (let ([maxl 0])
                  (let ([process #t])
                  (let ([stop (- maximumprimes 1)])
                  (let ([len 1])
                  (let ([resp 1])
                  (letrec ([r (lambda (len maxl process resp stop) 
                                (if process
                                (let ([process #f])
                                (let ([u 0])
                                (let ([v stop])
                                (letrec ([s (lambda (i maxl process resp stop) 
                                              (if (<= i v)
                                              ((lambda (internal_env) (apply (lambda
                                               (maxl process resp stop) 
                                              (s (+ i 1) maxl process resp stop)) internal_env)) 
                                              (if (< (+ i len) nprimes)
                                              (block
                                                (vector-set! sum i (+ (vector-ref sum i) (vector-ref primes (+ i len))))
                                                ((lambda (internal_env) (apply (lambda
                                                 (maxl process resp stop) 
                                                (list maxl process resp stop)) internal_env)) 
                                                (if (> maximumprimes (vector-ref sum i))
                                                (let ([process #t])
                                                ((lambda (internal_env) (apply (lambda
                                                 (maxl resp) 
                                                (list maxl process resp stop)) internal_env)) 
                                                (if (eq? (vector-ref era (vector-ref sum i)) (vector-ref sum i))
                                                (let ([maxl len])
                                                (let ([resp (vector-ref sum i)])
                                                (list maxl resp)))
                                                (list maxl resp))))
                                                (let ([stop (min2 stop i)])
                                                (list maxl process resp stop))))
                                                )
                                              (list maxl process resp stop)))
                                              (let ([len (+ len 1)])
                                              (r len maxl process resp stop))))])
                                (s u maxl process resp stop)))))
                                (block
                                  (map display (list resp "\n" maxl "\n"))
                                  )))])
                  (r len maxl process resp stop))))))))
    )))])
  (w x l)))))))))
)

