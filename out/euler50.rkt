#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))

(define (eratostene t0 max0)
  ;toto
  (let ([n 0])
  (let ([e 2])
  (let ([f (- max0 1)])
  (letrec ([c (lambda (i n) 
                (if (<= i f)
                (let ([n (if (eq? (vector-ref t0 i) i)
                         (let ([n (+ n 1)])
                         (block
                           (if (> (quotient max0 i) i)
                           (let ([j (* i i)])
                           (letrec ([d (lambda (j) 
                                         (if (and (< j max0) (> j 0))
                                         (block
                                           (vector-set! t0 j 0)
                                           (let ([j (+ j i)])
                                           (d j))
                                           )
                                         '()))])
                           (d j)))
                           '())
                         n
                         ))
                n)])
                (c (+ i 1) n))
                n))])
  (c e n)))))
)
(define main
  (let ([maximumprimes 1000001])
  (let ([era (array_init_withenv maximumprimes (lambda (j) 
                                                 (lambda (_) (let ([g j])
                                                             (list '() g)))) '())])
  (let ([nprimes (eratostene era maximumprimes)])
  (let ([primes (array_init_withenv nprimes (lambda (o) 
                                              (lambda (_) (let ([h 0])
                                                          (list '() h)))) '())])
  (let ([l 0])
  (let ([v 2])
  (let ([w (- maximumprimes 1)])
  (letrec ([u (lambda (k l) 
                (if (<= k w)
                (let ([l (if (eq? (vector-ref era k) k)
                         (block
                           (vector-set! primes l k)
                           (let ([l (+ l 1)])
                           l)
                           )
                         l)])
                (u (+ k 1) l))
                (block
                  (map display (list l " == " nprimes "\n"))
                  (let ([sum (array_init_withenv nprimes (lambda (i_) 
                                                           (lambda (_) 
                                                           (let ([m (vector-ref primes i_)])
                                                           (list '() m)))) '())])
                  (let ([maxl 0])
                  (let ([process #t])
                  (let ([stop (- maximumprimes 1)])
                  (let ([len 1])
                  (let ([resp 1])
                  (letrec ([p (lambda (len maxl process resp stop) 
                                (if process
                                (let ([process #f])
                                (let ([r 0])
                                (let ([s stop])
                                (letrec ([q (lambda (i maxl process resp stop) 
                                              (if (<= i s)
                                              ((lambda (internal_env) (apply (lambda
                                               (maxl process resp stop) 
                                              (q (+ i 1) maxl process resp stop)) internal_env)) 
                                              (if (< (+ i len) nprimes)
                                              (block
                                                (vector-set! sum i (+ (vector-ref sum i) (vector-ref primes (+ i len))))
                                                ((lambda (internal_env) (apply (lambda
                                                 (maxl process resp stop) 
                                                (list maxl process resp stop)) internal_env)) 
                                                (if (> maximumprimes (vector-ref sum i))
                                                (let ([process #t])
                                                ((lambda (internal_env) (apply (lambda
                                                 (maxl resp) 
                                                (list maxl process resp stop)) internal_env)) 
                                                (if (eq? (vector-ref era (vector-ref sum i)) (vector-ref sum i))
                                                (let ([maxl len])
                                                (let ([resp (vector-ref sum i)])
                                                (list maxl resp)))
                                                (list maxl resp))))
                                                (let ([stop (min stop i)])
                                                (list maxl process resp stop))))
                                                )
                                              (list maxl process resp stop)))
                                              (let ([len (+ len 1)])
                                              (p len maxl process resp stop))))])
                                (q r maxl process resp stop)))))
                                (block
                                  (map display (list resp "\n" maxl "\n"))
                                  )))])
                  (p len maxl process resp stop))))))))
    )))])
  (u v l)))))))))
)

