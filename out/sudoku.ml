(* lit un sudoku sur l'entrée standard *)
let read_sudoku () =
  let out0 = Array.init (9 * 9) (fun _i ->
    let k = Scanf.scanf "%d " (fun v_0 -> v_0) in
    k) in
  out0

(* affiche un sudoku *)
let print_sudoku sudoku0 =
  for y = 0 to 8 do
    for x = 0 to 8 do
      Printf.printf "%d " sudoku0.(x + y * 9);
      if x mod 3 = 2 then
        Printf.printf " "
    done;
    Printf.printf "\n";
    if y mod 3 = 2 then
      Printf.printf "\n"
  done;
  Printf.printf "\n"

(* dit si les variables sont toutes différentes *)
(* dit si les variables sont toutes différentes *)
(* dit si le sudoku est terminé de remplir *)
exception Found_1 of bool

let sudoku_done s =
  try
  for i = 0 to 80 do
    if s.(i) = 0 then
      raise (Found_1(false))
  done;
  true
  with Found_1 (out) -> out

(* dit si il y a une erreur dans le sudoku *)
let sudoku_error s =
  let out1 = ref( false ) in
  for x = 0 to 8 do
    out1 := (!out1) || s.(x) <> 0 && s.(x) = s.(x + 9) || s.(x) <> 0 && s.(x) = s.(x + 9 * 2) || s.(x + 9) <> 0 && s.(x + 9) = s.(x + 9 * 2) || s.(x) <> 0 && s.(x) = s.(x + 9 * 3) || s.(x + 9) <> 0 && s.(x + 9) = s.(x + 9 * 3) || s.(x + 9 * 2) <> 0 && s.(x + 9 * 2) = s.(x + 9 * 3) || s.(x) <> 0 && s.(x) = s.(x + 9 * 4) || s.(x + 9) <> 0 && s.(x + 9) = s.(x + 9 * 4) || s.(x + 9 * 2) <> 0 && s.(x + 9 * 2) = s.(x + 9 * 4) || s.(x + 9 * 3) <> 0 && s.(x + 9 * 3) = s.(x + 9 * 4) || s.(x) <> 0 && s.(x) = s.(x + 9 * 5) || s.(x + 9) <> 0 && s.(x + 9) = s.(x + 9 * 5) || s.(x + 9 * 2) <> 0 && s.(x + 9 * 2) = s.(x + 9 * 5) || s.(x + 9 * 3) <> 0 && s.(x + 9 * 3) = s.(x + 9 * 5) || s.(x + 9 * 4) <> 0 && s.(x + 9 * 4) = s.(x + 9 * 5) || s.(x) <> 0 && s.(x) = s.(x + 9 * 6) || s.(x + 9) <> 0 && s.(x + 9) = s.(x + 9 * 6) || s.(x + 9 * 2) <> 0 && s.(x + 9 * 2) = s.(x + 9 * 6) || s.(x + 9 * 3) <> 0 && s.(x + 9 * 3) = s.(x + 9 * 6) || s.(x + 9 * 4) <> 0 && s.(x + 9 * 4) = s.(x + 9 * 6) || s.(x + 9 * 5) <> 0 && s.(x + 9 * 5) = s.(x + 9 * 6) || s.(x) <> 0 && s.(x) = s.(x + 9 * 7) || s.(x + 9) <> 0 && s.(x + 9) = s.(x + 9 * 7) || s.(x + 9 * 2) <> 0 && s.(x + 9 * 2) = s.(x + 9 * 7) || s.(x + 9 * 3) <> 0 && s.(x + 9 * 3) = s.(x + 9 * 7) || s.(x + 9 * 4) <> 0 && s.(x + 9 * 4) = s.(x + 9 * 7) || s.(x + 9 * 5) <> 0 && s.(x + 9 * 5) = s.(x + 9 * 7) || s.(x + 9 * 6) <> 0 && s.(x + 9 * 6) = s.(x + 9 * 7) || s.(x) <> 0 && s.(x) = s.(x + 9 * 8) || s.(x + 9) <> 0 && s.(x + 9) = s.(x + 9 * 8) || s.(x + 9 * 2) <> 0 && s.(x + 9 * 2) = s.(x + 9 * 8) || s.(x + 9 * 3) <> 0 && s.(x + 9 * 3) = s.(x + 9 * 8) || s.(x + 9 * 4) <> 0 && s.(x + 9 * 4) = s.(x + 9 * 8) || s.(x + 9 * 5) <> 0 && s.(x + 9 * 5) = s.(x + 9 * 8) || s.(x + 9 * 6) <> 0 && s.(x + 9 * 6) = s.(x + 9 * 8) || s.(x + 9 * 7) <> 0 && s.(x + 9 * 7) = s.(x + 9 * 8)
  done;
  let out2 = ref( false ) in
  for x = 0 to 8 do
    out2 := (!out2) || s.(x * 9) <> 0 && s.(x * 9) = s.(x * 9 + 1) || s.(x * 9) <> 0 && s.(x * 9) = s.(x * 9 + 2) || s.(x * 9 + 1) <> 0 && s.(x * 9 + 1) = s.(x * 9 + 2) || s.(x * 9) <> 0 && s.(x * 9) = s.(x * 9 + 3) || s.(x * 9 + 1) <> 0 && s.(x * 9 + 1) = s.(x * 9 + 3) || s.(x * 9 + 2) <> 0 && s.(x * 9 + 2) = s.(x * 9 + 3) || s.(x * 9) <> 0 && s.(x * 9) = s.(x * 9 + 4) || s.(x * 9 + 1) <> 0 && s.(x * 9 + 1) = s.(x * 9 + 4) || s.(x * 9 + 2) <> 0 && s.(x * 9 + 2) = s.(x * 9 + 4) || s.(x * 9 + 3) <> 0 && s.(x * 9 + 3) = s.(x * 9 + 4) || s.(x * 9) <> 0 && s.(x * 9) = s.(x * 9 + 5) || s.(x * 9 + 1) <> 0 && s.(x * 9 + 1) = s.(x * 9 + 5) || s.(x * 9 + 2) <> 0 && s.(x * 9 + 2) = s.(x * 9 + 5) || s.(x * 9 + 3) <> 0 && s.(x * 9 + 3) = s.(x * 9 + 5) || s.(x * 9 + 4) <> 0 && s.(x * 9 + 4) = s.(x * 9 + 5) || s.(x * 9) <> 0 && s.(x * 9) = s.(x * 9 + 6) || s.(x * 9 + 1) <> 0 && s.(x * 9 + 1) = s.(x * 9 + 6) || s.(x * 9 + 2) <> 0 && s.(x * 9 + 2) = s.(x * 9 + 6) || s.(x * 9 + 3) <> 0 && s.(x * 9 + 3) = s.(x * 9 + 6) || s.(x * 9 + 4) <> 0 && s.(x * 9 + 4) = s.(x * 9 + 6) || s.(x * 9 + 5) <> 0 && s.(x * 9 + 5) = s.(x * 9 + 6) || s.(x * 9) <> 0 && s.(x * 9) = s.(x * 9 + 7) || s.(x * 9 + 1) <> 0 && s.(x * 9 + 1) = s.(x * 9 + 7) || s.(x * 9 + 2) <> 0 && s.(x * 9 + 2) = s.(x * 9 + 7) || s.(x * 9 + 3) <> 0 && s.(x * 9 + 3) = s.(x * 9 + 7) || s.(x * 9 + 4) <> 0 && s.(x * 9 + 4) = s.(x * 9 + 7) || s.(x * 9 + 5) <> 0 && s.(x * 9 + 5) = s.(x * 9 + 7) || s.(x * 9 + 6) <> 0 && s.(x * 9 + 6) = s.(x * 9 + 7) || s.(x * 9) <> 0 && s.(x * 9) = s.(x * 9 + 8) || s.(x * 9 + 1) <> 0 && s.(x * 9 + 1) = s.(x * 9 + 8) || s.(x * 9 + 2) <> 0 && s.(x * 9 + 2) = s.(x * 9 + 8) || s.(x * 9 + 3) <> 0 && s.(x * 9 + 3) = s.(x * 9 + 8) || s.(x * 9 + 4) <> 0 && s.(x * 9 + 4) = s.(x * 9 + 8) || s.(x * 9 + 5) <> 0 && s.(x * 9 + 5) = s.(x * 9 + 8) || s.(x * 9 + 6) <> 0 && s.(x * 9 + 6) = s.(x * 9 + 8) || s.(x * 9 + 7) <> 0 && s.(x * 9 + 7) = s.(x * 9 + 8)
  done;
  let out3 = ref( false ) in
  for x = 0 to 8 do
    out3 := (!out3) || s.((x mod 3) * 3 * 9 + (x / 3) * 3) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3) = s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 1) || s.((x mod 3) * 3 * 9 + (x / 3) * 3) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3) = s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 2) || s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 1) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 1) = s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 2) || s.((x mod 3) * 3 * 9 + (x / 3) * 3) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3) = s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3) || s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 1) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 1) = s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3) || s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 2) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 2) = s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3) || s.((x mod 3) * 3 * 9 + (x / 3) * 3) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3) = s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 1) || s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 1) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 1) = s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 1) || s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 2) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 2) = s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 1) || s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3) <> 0 && s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3) = s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 1) || s.((x mod 3) * 3 * 9 + (x / 3) * 3) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3) = s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 2) || s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 1) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 1) = s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 2) || s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 2) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 2) = s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 2) || s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3) <> 0 && s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3) = s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 2) || s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 1) <> 0 && s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 1) = s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 2) || s.((x mod 3) * 3 * 9 + (x / 3) * 3) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3) || s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 1) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 1) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3) || s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 2) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 2) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3) || s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3) <> 0 && s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3) || s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 1) <> 0 && s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 1) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3) || s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 2) <> 0 && s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 2) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3) || s.((x mod 3) * 3 * 9 + (x / 3) * 3) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3 + 1) || s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 1) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 1) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3 + 1) || s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 2) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 2) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3 + 1) || s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3) <> 0 && s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3 + 1) || s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 1) <> 0 && s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 1) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3 + 1) || s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 2) <> 0 && s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 2) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3 + 1) || s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3) <> 0 && s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3 + 1) || s.((x mod 3) * 3 * 9 + (x / 3) * 3) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3 + 2) || s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 1) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 1) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3 + 2) || s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 2) <> 0 && s.((x mod 3) * 3 * 9 + (x / 3) * 3 + 2) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3 + 2) || s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3) <> 0 && s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3 + 2) || s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 1) <> 0 && s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 1) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3 + 2) || s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 2) <> 0 && s.(((x mod 3) * 3 + 1) * 9 + (x / 3) * 3 + 2) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3 + 2) || s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3) <> 0 && s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3 + 2) || s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3 + 1) <> 0 && s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3 + 1) = s.(((x mod 3) * 3 + 2) * 9 + (x / 3) * 3 + 2)
  done;
  (!out1) || (!out2) || (!out3)

(* résout le sudoku*)
exception Found_2 of bool

let rec solve sudoku0 =
  try
  if sudoku_error sudoku0 then
    false
  else if sudoku_done sudoku0 then
    true
  else
    begin
      for i = 0 to 80 do
        if sudoku0.(i) = 0 then
          begin
            for p = 1 to 9 do
              sudoku0.(i) <- p;
              if solve sudoku0 then
                raise (Found_2(true))
            done;
            sudoku0.(i) <- 0;
            raise (Found_2(false))
          end
      done;
      false
    end
  with Found_2 (out) -> out

let () =
begin
  let sudoku0 = read_sudoku () in
  print_sudoku sudoku0;
  if solve sudoku0 then
    print_sudoku sudoku0
  else
    Printf.printf "no solution\n"
end
 