let eratostene (t:int array) max0 =
  let n = ref( 0 )
  for i = 2 to max0 - 1 do
    if t.[i] = i then
      n := (!n) + 1
      let j = ref( i * i )
      while (!j) < max0 && (!j) > 0 do
        t.[(!j)] <- 0
        j := (!j) + i
  (!n)

exception Found_1 of int

let fillPrimesFactors (t:int array) n (primes:int array) nprimes =
  let n = ref n
  try
  for i = 0 to nprimes - 1 do
    let d = primes.[i]
    while (!n) % d = 0 do
      t.[d] <- t.[d] + 1
      n := (!n) / d
    if (!n) = 1 then
      raise (Found_1(primes.[i]))
  (!n)
  with Found_1 (out) -> out

let sumdivaux2 (t:int array) n i =
  let i = ref i
  while (!i) < n && t.[(!i)] = 0 do
    i := (!i) + 1
  (!i)

let rec sumdivaux (t:int array) n i =
  if i > n then
    1
  else
    if t.[i] = 0 then
      sumdivaux t n (sumdivaux2 t n (i + 1))
    else
      let o = sumdivaux t n (sumdivaux2 t n (i + 1))
      let out0 = ref( 0 )
      let p = ref( i )
      for j = 1 to t.[i] do
        out0 := (!out0) + (!p)
        p := (!p) * i
      ((!out0) + 1) * o

let sumdiv nprimes (primes:int array) n =
  let t = Array.init (n + 1) (fun i ->
    0)
  let max0 = fillPrimesFactors t n primes nprimes
  sumdivaux t max0 0

let () =
  let maximumprimes = 1001
  let era = Array.init maximumprimes (fun j ->
    j)
  let nprimes = eratostene era maximumprimes
  let primes = Array.init nprimes (fun o ->
    0)
  let l = ref( 0 )
  for k = 2 to maximumprimes - 1 do
    if era.[k] = k then
      primes.[(!l)] <- k
      l := (!l) + 1
  Printf.printf "%d == %d\n" (!l) nprimes
  let sum = ref( 0 )
  for n = 2 to 1000 do
    let other = sumdiv nprimes primes n - n
    if other > n then
      let othersum = sumdiv nprimes primes other - other
      if othersum = n then
        Printf.printf "%d & %d\n" other n
        sum := (!sum) + other + n
  Printf.printf "\n%d\n" (!sum)
 