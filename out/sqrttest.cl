
(si::use-fast-links nil)
(defun array_init (len fun)
  (let ((out (make-array len)) (i 0))
    (while (not (= i len))
      (progn
        (setf (aref out i) (funcall fun i))
        (setq i (+ 1 i ))))
        out
    ))
(defun quotient (a b) (truncate a b))
(defun remainder (a b) (- a (* b (truncate a b))))

(defun isqrt_ (c)
(return-from isqrt_ (isqrt c)))

(progn
  (let ((b 4))
    (let ((a (isqrt b)))
      (princ a)
      (princ " ")
      (let ((e 16))
        (let ((d (isqrt e)))
          (princ d)
          (princ " ")
          (let ((g 20))
            (let ((f (isqrt g)))
              (princ f)
              (princ " ")
              (let ((i 1000))
                (let ((h (isqrt i)))
                  (princ h)
                  (princ " ")
                  (let ((k 500))
                    (let ((j (isqrt k)))
                      (princ j)
                      (princ " ")
                      (let ((m 10))
                        (let ((l (isqrt m)))
                          (princ l)
                          (princ " ")
                        )))))))))))))

