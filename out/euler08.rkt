#lang racket
(require racket/block)

(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))
(define last-char 0)
(define next-char (lambda () (set! last-char (read-char (current-input-port)))))
(next-char)
(define mread-char (lambda ()
  (let ([ out last-char])
    (block
      (next-char)
      out
    ))))

(define mread-int (lambda ()
  (if (eq? #\- last-char)
  (block
    (next-char) (- 0 (mread-int)))
    (letrec ([w (lambda (out)
      (if (eof-object? last-char)
        out
        (if (and last-char (>= (char->integer last-char) (char->integer #\0)) (<= (char->integer last-char) (char->integer #\9)))
          (let ([out (+ (* 10 out) (- (char->integer last-char) (char->integer #\0)))])
            (block
              (next-char)
              (w out)
          ))
        out
      )))]) (w 0)))))

(define mread-blank (lambda ()
  (if (or (eq? last-char #\NewLine) (eq? last-char #\Space) ) (block (next-char) (mread-blank)) '())
))

(define max2 (lambda (a b) 
               (let ([h (lambda (a b) 
                          '())])
               (if (> a b)
                 a
                 b))))
(define main (let ([i 1])
               (let ([g 5])
                 (let ([last (array_init_withenv g (lambda (j) 
                                                     (lambda (internal_env) (apply (lambda
                                                      (g i) 
                                                     ((lambda (c) 
                                                        (let ([d (- (char->integer c) (char->integer #\0))])
                                                          (let ([i (* i d)])
                                                            (let ([l d])
                                                              (list (list g i) l))))) (mread-char))) internal_env))) (list g i))])
               (let ([max_ i])
                 (let ([index 0])
                   (let ([nskipdiv 0])
                     (let ([p 1])
                       (let ([q 995])
                         (letrec ([m (lambda (k nskipdiv index max_ g i) 
                                       (if (<= k q)
                                         ((lambda (e) 
                                            (let ([f (- (char->integer e) (char->integer #\0))])
                                              (let ([n (lambda (f e nskipdiv index max_ g i) 
                                                         (block (vector-set! last index f) 
                                                         (let ([index (remainder (+ index 1) 5)])
                                                           (let ([max_ (max2 max_ i)])
                                                             (m (+ k 1) nskipdiv index max_ g i)))))])
                                              (if (eq? f 0)
                                                (let ([i 1])
                                                  (let ([nskipdiv 4])
                                                    (n f e nskipdiv index max_ g i)))
                                                (let ([i (* i f)])
                                                  (let ([o (lambda (f e nskipdiv index max_ g i) 
                                                             (let ([nskipdiv (- nskipdiv 1)])
                                                               (n f e nskipdiv index max_ g i)))])
                                                  (if (< nskipdiv 0)
                                                    (let ([i (quotient i (vector-ref last index))])
                                                      (o f e nskipdiv index max_ g i))
                                                    (o f e nskipdiv index max_ g i)))))))) (mread-char))
                         (block
                           (display max_)
                           (display "\n")
                           )))])
                   (m p nskipdiv index max_ g i)))))))))))

