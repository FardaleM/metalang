#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    )))))
(define last-char 0)
(define next-char (lambda () (set! last-char (read-char (current-input-port)))))
(next-char)
(define mread-char (lambda ()
  (let ([ out last-char])
    (block
      (next-char)
      out
    ))))

(define main
  (let ([i 1])
  (let ([last (array_init_withenv 5 (lambda (j) 
                                      (lambda (i) 
                                        ((lambda (c) 
                                           (let ([d (- (char->integer c) (char->integer #\0))])
                                           (let ([i (* i d)])
                                           (let ([h d])
                                           (list i h))))) (mread-char)))) i)])
(let ([max_ i])
(let ([index 0])
(let ([nskipdiv 0])
(let ([m 1])
(let ([n 995])
(letrec ([l (lambda (k i index max_ nskipdiv) 
              (if (<= k n)
              ((lambda (e) 
                 (let ([f (- (char->integer e) (char->integer #\0))])
                 ((lambda (internal_env) (apply (lambda (i nskipdiv) 
                                                       (block
                                                         (vector-set! last index f)
                                                         (let ([index (remainder (+ index 1) 5)])
                                                         (let ([max_ (max max_ i)])
                                                         (l (+ k 1) i index max_ nskipdiv)))
                                                         )) internal_env)) 
                 (if (eq? f 0)
                 (let ([i 1])
                 (let ([nskipdiv 4])
                 (list i nskipdiv)))
                 (let ([i (* i f)])
                 (let ([i (if (< nskipdiv 0)
                          (let ([i (quotient i (vector-ref last index))])
                          i)
                          i)])
                 (let ([nskipdiv (- nskipdiv 1)])
                 (list i nskipdiv)))))))) (mread-char))
              (block
                (map display (list max_ "\n"))
                )))])
(l m i index max_ nskipdiv)))))))))
)

