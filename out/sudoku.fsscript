
open System
let eof = ref false
let buffer = ref ""
let readChar_ () =
  if (!buffer) = "" then
    let tmp = Console.ReadLine()
    eof := tmp = null
    buffer := tmp + "\n"
  (!buffer).[0]

let consommeChar () =
  ignore (readChar_ ())
  buffer := (!buffer).[1..]

let stdin_sep () =
  let cond () =
    if !eof then
      false
    else
      let c = readChar_()
      c = ' ' || c = '\n' || c = '\t' || c = '\r'
  while cond () do
    consommeChar ()

let readInt () =
  let sign =
    if readChar_ () = '-' then
      consommeChar ()
      -1
    else 1
  let rec loop i =
    let c = readChar_ ()
    if c <= '9' && c >= '0' then
      consommeChar ()
      loop (i * 10 + (int c) - (int '0'))
    else
      i * sign
  loop 0
(* lit un sudoku sur l'entrée standard *)
let read_sudoku () : int array =
  let out0 = Array.init (9 * 9) (fun _i ->
    let k = readInt()
    stdin_sep();
    k)
  out0

(* affiche un sudoku *)
let print_sudoku (sudoku0:int array) =
  for y = 0 to 8 do
    for x = 0 to 8 do
      Printf.printf "%d " sudoku0.[x + y * 9]
      if x % 3 = 2 then
        Printf.printf " "
        
    Printf.printf "\n"
    if y % 3 = 2 then
      Printf.printf "\n"
      
  Printf.printf "\n"

(* dit si les variables sont toutes différentes *)
(* dit si les variables sont toutes différentes *)
(* dit si le sudoku est terminé de remplir *)
exception Found_1 of bool

let sudoku_done (s:int array) : bool =
  try
  for i = 0 to 80 do
    if s.[i] = 0 then
      raise (Found_1(false))
      
  true
  with Found_1 (out) -> out

(* dit si il y a une erreur dans le sudoku *)
let sudoku_error (s:int array) : bool =
  let out1 = ref( false )
  for x = 0 to 8 do
    out1 := (!out1) || s.[x] <> 0 && s.[x] = s.[x + 9] || s.[x] <> 0 && s.[x] = s.[x + 9 * 2] || s.[x + 9] <> 0 && s.[x + 9] = s.[x + 9 * 2] || s.[x] <> 0 && s.[x] = s.[x + 9 * 3] || s.[x + 9] <> 0 && s.[x + 9] = s.[x + 9 * 3] || s.[x + 9 * 2] <> 0 && s.[x + 9 * 2] = s.[x + 9 * 3] || s.[x] <> 0 && s.[x] = s.[x + 9 * 4] || s.[x + 9] <> 0 && s.[x + 9] = s.[x + 9 * 4] || s.[x + 9 * 2] <> 0 && s.[x + 9 * 2] = s.[x + 9 * 4] || s.[x + 9 * 3] <> 0 && s.[x + 9 * 3] = s.[x + 9 * 4] || s.[x] <> 0 && s.[x] = s.[x + 9 * 5] || s.[x + 9] <> 0 && s.[x + 9] = s.[x + 9 * 5] || s.[x + 9 * 2] <> 0 && s.[x + 9 * 2] = s.[x + 9 * 5] || s.[x + 9 * 3] <> 0 && s.[x + 9 * 3] = s.[x + 9 * 5] || s.[x + 9 * 4] <> 0 && s.[x + 9 * 4] = s.[x + 9 * 5] || s.[x] <> 0 && s.[x] = s.[x + 9 * 6] || s.[x + 9] <> 0 && s.[x + 9] = s.[x + 9 * 6] || s.[x + 9 * 2] <> 0 && s.[x + 9 * 2] = s.[x + 9 * 6] || s.[x + 9 * 3] <> 0 && s.[x + 9 * 3] = s.[x + 9 * 6] || s.[x + 9 * 4] <> 0 && s.[x + 9 * 4] = s.[x + 9 * 6] || s.[x + 9 * 5] <> 0 && s.[x + 9 * 5] = s.[x + 9 * 6] || s.[x] <> 0 && s.[x] = s.[x + 9 * 7] || s.[x + 9] <> 0 && s.[x + 9] = s.[x + 9 * 7] || s.[x + 9 * 2] <> 0 && s.[x + 9 * 2] = s.[x + 9 * 7] || s.[x + 9 * 3] <> 0 && s.[x + 9 * 3] = s.[x + 9 * 7] || s.[x + 9 * 4] <> 0 && s.[x + 9 * 4] = s.[x + 9 * 7] || s.[x + 9 * 5] <> 0 && s.[x + 9 * 5] = s.[x + 9 * 7] || s.[x + 9 * 6] <> 0 && s.[x + 9 * 6] = s.[x + 9 * 7] || s.[x] <> 0 && s.[x] = s.[x + 9 * 8] || s.[x + 9] <> 0 && s.[x + 9] = s.[x + 9 * 8] || s.[x + 9 * 2] <> 0 && s.[x + 9 * 2] = s.[x + 9 * 8] || s.[x + 9 * 3] <> 0 && s.[x + 9 * 3] = s.[x + 9 * 8] || s.[x + 9 * 4] <> 0 && s.[x + 9 * 4] = s.[x + 9 * 8] || s.[x + 9 * 5] <> 0 && s.[x + 9 * 5] = s.[x + 9 * 8] || s.[x + 9 * 6] <> 0 && s.[x + 9 * 6] = s.[x + 9 * 8] || s.[x + 9 * 7] <> 0 && s.[x + 9 * 7] = s.[x + 9 * 8]
  let out2 = ref( false )
  for x = 0 to 8 do
    out2 := (!out2) || s.[x * 9] <> 0 && s.[x * 9] = s.[x * 9 + 1] || s.[x * 9] <> 0 && s.[x * 9] = s.[x * 9 + 2] || s.[x * 9 + 1] <> 0 && s.[x * 9 + 1] = s.[x * 9 + 2] || s.[x * 9] <> 0 && s.[x * 9] = s.[x * 9 + 3] || s.[x * 9 + 1] <> 0 && s.[x * 9 + 1] = s.[x * 9 + 3] || s.[x * 9 + 2] <> 0 && s.[x * 9 + 2] = s.[x * 9 + 3] || s.[x * 9] <> 0 && s.[x * 9] = s.[x * 9 + 4] || s.[x * 9 + 1] <> 0 && s.[x * 9 + 1] = s.[x * 9 + 4] || s.[x * 9 + 2] <> 0 && s.[x * 9 + 2] = s.[x * 9 + 4] || s.[x * 9 + 3] <> 0 && s.[x * 9 + 3] = s.[x * 9 + 4] || s.[x * 9] <> 0 && s.[x * 9] = s.[x * 9 + 5] || s.[x * 9 + 1] <> 0 && s.[x * 9 + 1] = s.[x * 9 + 5] || s.[x * 9 + 2] <> 0 && s.[x * 9 + 2] = s.[x * 9 + 5] || s.[x * 9 + 3] <> 0 && s.[x * 9 + 3] = s.[x * 9 + 5] || s.[x * 9 + 4] <> 0 && s.[x * 9 + 4] = s.[x * 9 + 5] || s.[x * 9] <> 0 && s.[x * 9] = s.[x * 9 + 6] || s.[x * 9 + 1] <> 0 && s.[x * 9 + 1] = s.[x * 9 + 6] || s.[x * 9 + 2] <> 0 && s.[x * 9 + 2] = s.[x * 9 + 6] || s.[x * 9 + 3] <> 0 && s.[x * 9 + 3] = s.[x * 9 + 6] || s.[x * 9 + 4] <> 0 && s.[x * 9 + 4] = s.[x * 9 + 6] || s.[x * 9 + 5] <> 0 && s.[x * 9 + 5] = s.[x * 9 + 6] || s.[x * 9] <> 0 && s.[x * 9] = s.[x * 9 + 7] || s.[x * 9 + 1] <> 0 && s.[x * 9 + 1] = s.[x * 9 + 7] || s.[x * 9 + 2] <> 0 && s.[x * 9 + 2] = s.[x * 9 + 7] || s.[x * 9 + 3] <> 0 && s.[x * 9 + 3] = s.[x * 9 + 7] || s.[x * 9 + 4] <> 0 && s.[x * 9 + 4] = s.[x * 9 + 7] || s.[x * 9 + 5] <> 0 && s.[x * 9 + 5] = s.[x * 9 + 7] || s.[x * 9 + 6] <> 0 && s.[x * 9 + 6] = s.[x * 9 + 7] || s.[x * 9] <> 0 && s.[x * 9] = s.[x * 9 + 8] || s.[x * 9 + 1] <> 0 && s.[x * 9 + 1] = s.[x * 9 + 8] || s.[x * 9 + 2] <> 0 && s.[x * 9 + 2] = s.[x * 9 + 8] || s.[x * 9 + 3] <> 0 && s.[x * 9 + 3] = s.[x * 9 + 8] || s.[x * 9 + 4] <> 0 && s.[x * 9 + 4] = s.[x * 9 + 8] || s.[x * 9 + 5] <> 0 && s.[x * 9 + 5] = s.[x * 9 + 8] || s.[x * 9 + 6] <> 0 && s.[x * 9 + 6] = s.[x * 9 + 8] || s.[x * 9 + 7] <> 0 && s.[x * 9 + 7] = s.[x * 9 + 8]
  let out3 = ref( false )
  for x = 0 to 8 do
    out3 := (!out3) || s.[(x % 3) * 3 * 9 + (x / 3) * 3] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3] = s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] || s.[(x % 3) * 3 * 9 + (x / 3) * 3] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3] = s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] || s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] = s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] || s.[(x % 3) * 3 * 9 + (x / 3) * 3] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3] = s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] || s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] = s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] || s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] = s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] || s.[(x % 3) * 3 * 9 + (x / 3) * 3] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3] = s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] || s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] = s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] || s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] = s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] || s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] <> 0 && s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] = s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] || s.[(x % 3) * 3 * 9 + (x / 3) * 3] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3] = s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] || s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] = s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] || s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] = s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] || s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] <> 0 && s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] = s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] || s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] <> 0 && s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] = s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] || s.[(x % 3) * 3 * 9 + (x / 3) * 3] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3] || s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3] || s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3] || s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] <> 0 && s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3] || s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] <> 0 && s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3] || s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] <> 0 && s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3] || s.[(x % 3) * 3 * 9 + (x / 3) * 3] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 1] || s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 1] || s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 1] || s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] <> 0 && s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 1] || s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] <> 0 && s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 1] || s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] <> 0 && s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 1] || s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3] <> 0 && s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 1] || s.[(x % 3) * 3 * 9 + (x / 3) * 3] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 2] || s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 1] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 2] || s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] <> 0 && s.[(x % 3) * 3 * 9 + (x / 3) * 3 + 2] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 2] || s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] <> 0 && s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 2] || s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] <> 0 && s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 1] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 2] || s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] <> 0 && s.[((x % 3) * 3 + 1) * 9 + (x / 3) * 3 + 2] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 2] || s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3] <> 0 && s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 2] || s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 1] <> 0 && s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 1] = s.[((x % 3) * 3 + 2) * 9 + (x / 3) * 3 + 2]
  (!out1) || (!out2) || (!out3)

(* résout le sudoku*)
exception Found_2 of bool

let rec solve (sudoku0:int array) : bool =
  try
  if sudoku_error sudoku0 then
    false
    
  else if sudoku_done sudoku0 then
    true
    
  else
      for i = 0 to 80 do
        if sudoku0.[i] = 0 then
            for p = 1 to 9 do
              sudoku0.[i] <- p
              if solve sudoku0 then
                raise (Found_2(true))
                
            sudoku0.[i] <- 0
            raise (Found_2(false))
      false
  with Found_2 (out) -> out

let () =
  let sudoku0 = read_sudoku ()
  print_sudoku sudoku0
  if solve sudoku0 then
    print_sudoku sudoku0
    
  else
    Printf.printf "no solution\n"
    
 