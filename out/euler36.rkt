#lang racket
(require racket/block)
(define array_init_withenv (lambda (len f env)
  (let ((tab (build-vector len (lambda (i)
    (let ([o ((f i) env)])
      (block
        (set! env (car o))
        (cadr o)
      )
    ))))) (list env tab))))

(define (palindrome2 pow2 n)
  (let ([t0 (build-vector 20 (lambda (i) 
                               (eq? (remainder (quotient n (vector-ref pow2 i)) 2) 1)))])
  (let ([nnum 0])
  (letrec ([h (lambda (j nnum) 
                (if (<= j 19)
                (if (vector-ref t0 j)
                (let ([nnum j])
                (h (+ j 1) nnum))
                (h (+ j 1) nnum))
                (letrec ([g (lambda (k) 
                              (if (<= k (quotient nnum 2))
                              (if (not (eq? (vector-ref t0 k) (vector-ref t0 (- nnum k))))
                              #f
                              (g (+ k 1)))
                              #t))])
                (g 0))))])
  (h 1 nnum))))
)
(define main
  (let ([p 1])
  ((lambda (internal_env) (apply (lambda (p pow2) 
                                        (let ([sum 0])
                                        (letrec ([s (lambda (d sum) 
                                                      (if (<= d 9)
                                                      (let ([sum (if (palindrome2 pow2 d)
                                                                 (block
                                                                   (printf "~a\n" d)
                                                                   (let ([sum (+ sum d)])
                                                                   sum)
                                                                   )
                                                                 sum)])
                                                      (if (palindrome2 pow2 (+ (* d 10) d))
                                                      (block
                                                        (printf "~a\n" (+ (* d 10) d))
                                                        (let ([sum (+ sum (* d 10) d)])
                                                        (s (+ d 1) sum))
                                                        )
                                                      (s (+ d 1) sum)))
                                                      (letrec ([o (lambda (a0 sum) 
                                                                    (if (<= a0 4)
                                                                    (let ([a (+ (* a0 2) 1)])
                                                                    (letrec ([q (lambda (b sum) 
                                                                                (if (<= b 9)
                                                                                (letrec ([r 
                                                                                (lambda (c sum) 
                                                                                (if (<= c 9)
                                                                                (let ([num0 (+ (* a 100000) (* b 10000) (* c 1000) (* c 100) (* b 10) a)])
                                                                                (let ([sum 
                                                                                (if (palindrome2 pow2 num0)
                                                                                (block
                                                                                (printf "~a\n" num0)
                                                                                (let ([sum (+ sum num0)])
                                                                                sum)
                                                                                )
                                                                                sum)])
                                                                                (let ([num1 (+ (* a 10000) (* b 1000) (* c 100) (* b 10) a)])
                                                                                (if (palindrome2 pow2 num1)
                                                                                (block
                                                                                (printf "~a\n" num1)
                                                                                (let ([sum (+ sum num1)])
                                                                                (r (+ c 1) sum))
                                                                                )
                                                                                (r (+ c 1) sum)))))
                                                                                (let ([num2 (+ (* a 100) (* b 10) a)])
                                                                                (let ([sum 
                                                                                (if (palindrome2 pow2 num2)
                                                                                (block
                                                                                (printf "~a\n" num2)
                                                                                (let ([sum (+ sum num2)])
                                                                                sum)
                                                                                )
                                                                                sum)])
                                                                                (let ([num3 (+ (* a 1000) (* b 100) (* b 10) a)])
                                                                                (if (palindrome2 pow2 num3)
                                                                                (block
                                                                                (printf "~a\n" num3)
                                                                                (let ([sum (+ sum num3)])
                                                                                (q (+ b 1) sum))
                                                                                )
                                                                                (q (+ b 1) sum)))))))])
                                                                                (r 0 sum))
                                                                                (o (+ a0 1) sum)))])
                                                                    (q 0 sum)))
                                                        (printf "sum=~a\n" sum)))])
                                          (o 0 sum))))])
  (s 1 sum)))) internal_env)) (array_init_withenv 20 (lambda (i) 
                                                       (lambda (p) 
                                                         (let ([p (* p 2)])
                                                         (let ([l (quotient p 2)])
                                                         (list p l))))) p)))
)

