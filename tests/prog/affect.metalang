
type toto := struct {
     foo : integer;
     bar : integer;
     blah : integer;
} as tuple;

toto mktoto(integer v1){
     toto t := {foo:=v1; bar:=v1; blah:=v1;};
     return t;
}

integer result(toto t_, toto t2_){
	toto t := t_;
	toto t2 := t2_;
	toto t3 := {foo:=0; bar:=0; blah:=0;};
	t3 := t2;
	t := t2;
	t2 := t3;
	t.blah := t.blah + 1;
	integer len := 1;
	integer array cache0[len] (i ->
		return -i;
	);
	integer array cache1[len] (i ->
		return i;
	);
	integer array cache2 := cache0;
	cache0 := cache1;
	cache2 := cache0;

	return t.foo + t.blah * t.bar + t.bar * t.foo;
}

prog{
     toto t := mktoto(4);
     toto t2 := mktoto(5);
     read<integer>(t.bar);
     stdin_sep();
     read<integer>(t.blah);
     stdin_sep();
     read<integer>(t2.bar);
     stdin_sep();
     read<integer>(t.blah);
     print<integer>(result(t, t2));
     print<integer>(t.blah);
}
