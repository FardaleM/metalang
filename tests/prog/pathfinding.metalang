

integer pathfind_aux(integer array array cache, char array array tab, integer x, integer y, integer posX, integer posY){
	if (posX == x - 1 && posY == y - 1){
	   return 0;
	}else if (posX < 0 || posY < 0 || posX >= x || posY >= y){
            return x * y * 10;
	}else if (tab[posY][posX] == '#'){
	    return x * y * 10;
	}else if (cache[posY][posX] != -1){
	      return cache[posY][posX];
	}else{
	   cache[posY][posX] := x * y * 10;
	   integer val1 := pathfind_aux(cache, tab, x, y, posX + 1, posY);
	   integer val2 := pathfind_aux(cache, tab, x, y, posX - 1, posY);
	   integer val3 := pathfind_aux(cache, tab, x, y, posX, posY - 1);
	   integer val4 := pathfind_aux(cache, tab, x, y, posX, posY + 1);
	   integer out := 1 + min4(val1, val2, val3, val4);
	   cache[posY][posX] := out;
	   return out;
	}
}


integer pathfind(char array array tab, integer x, integer y){
	integer array array cache[y] (i ->
		integer array tmp[x] (j ->
			return -1;
		);
		return tmp;
	);
	return pathfind_aux(cache, tab, x, y, 0, 0);
}

prog{
	integer x := 0;
	integer y := 0;
	read<integer>(x);
	stdin_sep();
	read<integer>(y);
	stdin_sep();
	char array array tab[y] (i ->
		char array tab2[x] (j ->
		     char tmp := '\0';
		     read<char>(tmp);
		     return tmp;
		);
		stdin_sep();
		return tab2;
	);
	integer result := pathfind(tab, x, y);
	print<integer>(result);
}
